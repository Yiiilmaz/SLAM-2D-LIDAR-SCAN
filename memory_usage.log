80 memory blocks (3458116160 bytes): function_base.py:5520
    new = empty(newshape, arr.dtype, arrorder)
6060 memory blocks (320564720 bytes): OccupancyGrid.py:56
    radByR.append(rangeIdxGrid[idx[:, 0], idx[:, 1]])
6050 memory blocks (320564560 bytes): OccupancyGrid.py:55
    radByY.append(yGrid[idx[:, 0], idx[:, 1]])
4050 memory blocks (320532560 bytes): OccupancyGrid.py:54
    radByX.append(xGrid[idx[:, 0], idx[:, 1]])
70 memory blocks (280003360 bytes): __init__.py:701
    x = np.array(x, subok=True, copy=copy)
6 memory blocks (8000992 bytes): FastSlam.py:201
    ogMap = np.flipud(1 - ogMap)
2177 memory blocks (4806816 bytes): lines.py:374
    self._markersize = None
1644 memory blocks (3629952 bytes): text.py:253
    self._rotation_mode = m
1 memory blocks (2621472 bytes): pathlib.py:71
    parsed.append(sys.intern(x))
29671 memory blocks (2255016 bytes): transforms.py:222
    self, lambda _, pop=child._parents.pop, k=id(self): pop(k))
20201 memory blocks (1321800 bytes): transforms.py:116
    self._parents = {}
5193 memory blocks (1121688 bytes): __init__.py:190
    self._pickled_cids = set()
27495 memory blocks (936962 bytes): decoder.py:353
    obj, end = self.scan_once(s, idx)
5713 memory blocks (641216 bytes): artist.py:150
    self._stale = True
9821 memory blocks (550352 bytes): artist.py:182
    self._sticky_edges = _XYPair([], [])
10388 memory blocks (540200 bytes): __init__.py:185
    self.exception_handler = exception_handler
7420 memory blocks (534208 bytes): transforms.py:221
    ref = weakref.ref(
4358 memory blocks (505424 bytes): markers.py:233
    self._marker_function = None
1529 memory blocks (452584 bytes): path.py:160
    self._readonly = False
2409 memory blocks (406832 bytes): contextlib.py:103
    self.gen = func(*args, **kwds)
7588 memory blocks (401936 bytes): transforms.py:223
    child._parents[id(self)] = ref
1337 memory blocks (395752 bytes): path.py:184
    pth._interpolation_steps = internals_from._interpolation_steps
6535 memory blocks (394363 bytes): fromnumeric.py:45
    result = getattr(asarray(obj), method)(*args, **kwds)
6645 memory blocks (393052 bytes): lines.py:686
    self._path = Path(np.asarray(xy).T,
5195 memory blocks (332480 bytes): __init__.py:188
    self._func_cid_map = {}
5195 memory blocks (332480 bytes): __init__.py:186
    self.callbacks = {}
4912 memory blocks (314279 bytes): <string>:1
2917 memory blocks (302445 bytes): <frozen importlib._bootstrap_external>:672
5193 memory blocks (290808 bytes): __init__.py:187
    self._cid_gen = itertools.count()
3287 memory blocks (277872 bytes): lines.py:662
    self._x, self._y = self._xy.T  # views
3601 memory blocks (259264 bytes): transforms.py:2363
    self.input_dims = a.input_dims
3292 memory blocks (237024 bytes): font_manager.py:662
    self._family = _normalize_font_family(rcParams['font.family'])
4910 memory blocks (235680 bytes): artist.py:170
    self._callbacks = cbook.CallbackRegistry()
3844 memory blocks (216832 bytes): transforms.py:785
    self._points_orig = self._points.copy()
2817 memory blocks (174532 bytes): lines.py:661
    self._xy = np.column_stack(np.broadcast_arrays(x, y)).astype(float)
3618 memory blocks (174120 bytes): transforms.py:1914
    self._mtx = matrix.copy()
3095 memory blocks (173688 bytes): __init__.py:1547
    f = CallWrapper(func, subst, self).__call__
3094 memory blocks (160888 bytes): __init__.py:1912
    self.func = func
2862 memory blocks (160272 bytes): transforms.py:780
    self._minpos = np.array([np.inf, np.inf])
931 memory blocks (156728 bytes): fromnumeric.py:56
    return _wrapit(obj, method, *args, **kwds)
1 memory blocks (147488 bytes): __init__.py:106
    def __init__(self, obj):
1 memory blocks (147488 bytes): pydevd.py:1327
    self._apply_filter_cache[cache_key] = True
1 memory blocks (147488 bytes): pydevd.py:1232
    cache[cache_key] = self._files_filtering.in_project_roots(absolute_filename)
1 memory blocks (147488 bytes): pydevd.py:1055
    _cache_file_type[cache_key] = file_type
1815 memory blocks (120792 bytes): transforms.py:2008
    self._mtx = np.dot(rotate_mtx, self._mtx)
1547 memory blocks (116103 bytes): __init__.py:1554
    name = name + func.__name__
2036 memory blocks (107124 bytes): pydevd.py:1298
    cache_key = (frame.f_code.co_firstlineno, original_filename, force_check_project_scope, frame.f_code)
1569 memory blocks (100736 bytes): path.py:149
    self._vertices = vertices
2046 memory blocks (98580 bytes): pydevd.py:1020
    cache_key = (frame.f_code.co_firstlineno, abs_real_path_and_basename[0], frame.f_code)
2044 memory blocks (98452 bytes): pydevd.py:1206
    cache_key = (frame.f_code.co_firstlineno, absolute_filename, frame.f_code)
1476 memory blocks (90288 bytes): transforms.py:775
    points = np.asarray(points, float)
1802 memory blocks (86896 bytes): transforms.py:2532
    return CompositeGenericTransform(a, b)
1338 memory blocks (85632 bytes): path.py:178
    pth._vertices = _to_unmasked_float_array(verts)
72 memory blocks (81216 bytes): figure.py:2262
    self._canvas_callbacks = cbook.CallbackRegistry()
36 memory blocks (79488 bytes): patches.py:728
    self._x0 = xy[0]
1645 memory blocks (78960 bytes): font_manager.py:945
    new = type(self)()
1224 memory blocks (78336 bytes): __init__.py:1369
    funcid = self._register(func, self._substitute,
35 memory blocks (77280 bytes): patches.py:729
    self._y0 = xy[1]
35 memory blocks (77280 bytes): axis.py:2300
    self.offset_text_position = 'left'
35 memory blocks (77280 bytes): axis.py:2032
    self.offset_text_position = 'bottom'
34 memory blocks (75072 bytes): _base.py:836
    self._yaxis_transform = mtransforms.blended_transform_factory(
432 memory blocks (71433 bytes): artist.py:116
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
1471 memory blocks (70984 bytes): lines.py:1288
    self._marker = MarkerStyle(marker=other._marker)
1338 memory blocks (64224 bytes): path.py:177
    pth = cls.__new__(cls)
419 memory blocks (62153 bytes): cycler.py:242
    yield dict(left)
859 memory blocks (61808 bytes): __init__.py:2594
    self.widgetName = widgetName
358 memory blocks (60144 bytes): __init__.py:111
    cnf.update(c)
279 memory blocks (50528 bytes): _base.py:239
    self.prop_cycler = itertools.cycle(cycler)
504 memory blocks (50400 bytes): _backend_tk.py:735
    def enter(event):
504 memory blocks (48384 bytes): _backend_tk.py:737
    def leave(event):
489 memory blocks (47077 bytes): abc.py:123
    return _abc_subclasscheck(cls, subclass)
708 memory blocks (45312 bytes): markers.py:320
    self._marker_function = getattr(
312 memory blocks (43120 bytes): shape_base.py:65
    ary = asanyarray(ary)
1289 memory blocks (41248 bytes): shape_base.py:650
    arr = array(arr, copy=False, subok=True, ndmin=2).T
700 memory blocks (39200 bytes): axis.py:200
    self._labelrotation = (mode, angle)
34 memory blocks (37808 bytes): artist.py:178
    self._gid = None
1165 memory blocks (37280 bytes): shape_base.py:652
    return _nx.concatenate(arrays, 1)
760 memory blocks (37240 bytes): transforms.py:839
    bbox = Bbox(np.reshape(args, (2, 2)))
709 memory blocks (34424 bytes): lines.py:705
    self._transformed_path = TransformedPath(_path, self.get_transform())
702 memory blocks (34280 bytes): axis.py:160
    self.gridline = mlines.Line2D(
701 memory blocks (34152 bytes): axis.py:172
    self.label2 = mtext.Text(
700 memory blocks (33600 bytes): axis.py:168
    self.label1 = mtext.Text(
700 memory blocks (33600 bytes): axis.py:155
    self.tick2line = mlines.Line2D(
700 memory blocks (33600 bytes): axis.py:150
    self.tick1line = mlines.Line2D(
630 memory blocks (33110 bytes): ticker.py:547
    if self._useLocale else fmt % arg)
403 memory blocks (31976 bytes): transforms.py:2608
    self._mtx = np.array([[outw,  0.0, outl],
478 memory blocks (31832 bytes): __init__.py:2584
    self.children = {}
396 memory blocks (31752 bytes): __init__.py:2583
    self._w = master._w + '.' + name
508 memory blocks (31062 bytes): artist.py:1062
    func = getattr(self, f"set_{k}", None)
638 memory blocks (30624 bytes): transforms.py:806
    return Bbox([[0, 0], [1, 1]])
179 memory blocks (30400 bytes): __init__.py:4093
    Image.__init__(self, 'photo', name, cnf, master, **kw)
576 memory blocks (29952 bytes): __init__.py:4024
    self.name = None
350 memory blocks (29400 bytes): transforms.py:2692
    self._mtx = IdentityTransform._mtx.copy()
604 memory blocks (29384 bytes): patches.py:754
    + transforms.Affine2D().rotate_deg_around(
604 memory blocks (29384 bytes): patches.py:753
    return (transforms.BboxTransformTo(bbox)
604 memory blocks (29352 bytes): artist.py:789
    self.clipbox = TransformedBbox(Bbox.unit(),
287 memory blocks (28656 bytes): weakref.py:54
    def _cb(arg):
438 memory blocks (28032 bytes): transforms.py:1144
    self._points = np.array([
770 memory blocks (27720 bytes): axis.py:484
    data=([0, 1], [0, 0]), transform=ax.get_yaxis_transform("grid"))
770 memory blocks (27720 bytes): axis.py:423
    data=([0, 0], [0, 1]), transform=ax.get_xaxis_transform("grid"))
504 memory blocks (26208 bytes): _backend_tk.py:743
    self.widget = widget
504 memory blocks (26208 bytes): ImageTk.py:110
    self.__mode = mode
468 memory blocks (26208 bytes): __init__.py:2597
    self._tclCommands = []
503 memory blocks (26168 bytes): __init__.py:107
    self._obj = obj
455 memory blocks (25480 bytes): transforms.py:2680
    self._t = (xt, yt)
1547 memory blocks (24752 bytes): __init__.py:1557
    self.tk.createcommand(name, f)
253 memory blocks (24680 bytes): pathlib.py:611
    return drv + root + cls._flavour.join(parts[1:])
770 memory blocks (24640 bytes): axis.py:482
    data=([1], [0]), transform=ax.get_yaxis_transform("tick2"))
770 memory blocks (24640 bytes): axis.py:480
    data=([0], [0]), transform=ax.get_yaxis_transform("tick1"))
770 memory blocks (24640 bytes): axis.py:421
    data=([0], [1]), transform=ax.get_xaxis_transform("tick2"))
770 memory blocks (24640 bytes): axis.py:419
    data=([0], [0]), transform=ax.get_xaxis_transform("tick1"))
1489 memory blocks (24216 bytes): lines.py:685
    xy = STEP_LOOKUP_MAP[self._drawstyle](*self._xy.T)
145 memory blocks (24208 bytes): fromnumeric.py:59
    return bound(*args, **kwds)
463 memory blocks (23232 bytes): __init__.py:1298
    return np.asarray(x, float)
919 memory blocks (22056 bytes): lines.py:64
    scaled_offset = offset * lw
308 memory blocks (21800 bytes): ImageTk.py:112
    self.__photo = tkinter.PhotoImage(**kw)
36 memory blocks (20736 bytes): __init__.py:2587
    self.master.children[self._name] = self
505 memory blocks (20616 bytes): _backend_tk.py:543
    ToolTip.createToolTip(button, tooltip_text)
322 memory blocks (20608 bytes): __init__.py:226
    self.callbacks.setdefault(signal, {})
322 memory blocks (20608 bytes): __init__.py:220
    self._func_cid_map.setdefault(signal, {})
420 memory blocks (20160 bytes): lines.py:1146
    self._marker = MarkerStyle(marker, self._marker.get_fillstyle())
568 memory blocks (18176 bytes): transforms.py:1913
    matrix = IdentityTransform._mtx.copy()
354 memory blocks (17800 bytes): axis.py:2057
    return XTick(self.axes, 0, major=major, **tick_kw)
445 memory blocks (17704 bytes): text.py:443
    ret = bbox, list(zip(lines, zip(ws, hs), *xys.T)), descent
353 memory blocks (17408 bytes): axis.py:2325
    return YTick(self.axes, 0, major=major, **tick_kw)
324 memory blocks (17280 bytes): __init__.py:1561
    self._tclCommands.append(name)
701 memory blocks (17224 bytes): axis.py:212
    self._pad = self._base_pad + self.get_tick_padding()
700 memory blocks (17200 bytes): ScanMatcher_OGBased.py:143
    matchedReading = {"x": estimatedX + dx, "y": estimatedY + dy, "theta": estimatedTheta + dtheta,
20 memory blocks (17120 bytes): ScanMatcher_OGBased.py:50
    rMeasure = np.asarray(rMeasure)
288 memory blocks (16896 bytes): __init__.py:4030
    name = "pyimage%r" % (Image._last_id,) # tk itself would use image<x>
156 memory blocks (16848 bytes): _base.py:351
    seg = mlines.Line2D(x, y, **kw)
140 memory blocks (16240 bytes): ticker.py:436
    self._offset_threshold = \
252 memory blocks (16128 bytes): _backend_tk.py:540
    command=getattr(self, callback),
158 memory blocks (15960 bytes): _base.py:531
    result = (make_artist(x[:, j % ncx], y[:, j % ncy], kw,
316 memory blocks (15536 bytes): axis.py:518
    self.gridline.set_ydata((loc,))
281 memory blocks (15136 bytes): ticker.py:184
    self.axis = axis
630 memory blocks (15120 bytes): axis.py:1049
    for tick, loc, label in zip(major_ticks, major_locs, major_labels):
630 memory blocks (15120 bytes): axis.py:135
    zorder = mlines.Line2D.zorder + 0.01
315 memory blocks (15120 bytes): axis.py:517
    self.tick2line.set_ydata((loc,))
315 memory blocks (15120 bytes): axis.py:516
    self.tick1line.set_ydata((loc,))
315 memory blocks (15120 bytes): axis.py:457
    self.gridline.set_xdata((loc,))
315 memory blocks (15120 bytes): axis.py:456
    self.tick2line.set_xdata((loc,))
315 memory blocks (15120 bytes): axis.py:455
    self.tick1line.set_xdata((loc,))
70 memory blocks (15120 bytes): cycler.py:168
    return set(self._keys)
143 memory blocks (14872 bytes): weakref.py:62
    self = ref.__new__(cls, obj, _cb)
41 memory blocks (14854 bytes): abc.py:106
    cls = super().__new__(mcls, name, bases, namespace, **kwargs)
596 memory blocks (14672 bytes): font_manager.py:880
    size = scale * FontManager.get_default_size()
280 memory blocks (14560 bytes): axis.py:542
    self._locator = None
252 memory blocks (14472 bytes): __init__.py:2578
    name = '!%s%d' % (name, count)
113 memory blocks (14224 bytes): _base.py:331
    default_dict = next(self.prop_cycler).copy()
253 memory blocks (14168 bytes): Image.py:537
    new._size = im.size
71 memory blocks (14064 bytes): _backend_tk.py:525
    self.window = window
245 memory blocks (14000 bytes): ticker.py:2005
    return np.concatenate([0.1 * steps[:-1], steps, [10 * steps[1]]])
453 memory blocks (13968 bytes): transforms.py:1867
    return affine_transform(points, mtx)
288 memory blocks (13824 bytes): markers.py:241
    self._transform = IdentityTransform()
288 memory blocks (13824 bytes): lines.py:371
    self._marker = MarkerStyle(marker, fillstyle)
214 memory blocks (13762 bytes): lines.py:842
    renderer.draw_markers(gc, marker_path, marker_trans,
159 memory blocks (13550 bytes): font_manager.py:1304
    rc_params = tuple(tuple(rcParams[key]) for key in [
209 memory blocks (13392 bytes): _base.py:2422
    return functools.partial(
252 memory blocks (13356 bytes): Image.py:536
    new.mode = im.mode
254 memory blocks (13120 bytes): _backend_tk.py:642
    image = ImageTk.PhotoImage(im.resize((size, size)), master=self)
78 memory blocks (13104 bytes): _base.py:532
    {**kwargs, 'label': label})
216 memory blocks (12708 bytes): __init__.py:2576
    name = '!%s' % (name,)
70 memory blocks (12600 bytes): core.py:2974
    self.__dict__.update(_dict)
253 memory blocks (12512 bytes): _backend_tk.py:734
    toolTip = ToolTip(widget)
216 memory blocks (12492 bytes): __init__.py:2570
    name = self.__class__.__name__.lower()
252 memory blocks (12456 bytes): __init__.py:126
    return _StrongRef(func)
216 memory blocks (12096 bytes): __init__.py:818
    self._mapping = {weakref.ref(x): [weakref.ref(x)] for x in init}
287 memory blocks (11952 bytes): __init__.py:124
    return weakref.WeakMethod(func, callback)
210 memory blocks (11760 bytes): lines.py:58
    return offset, dashes
140 memory blocks (11760 bytes): ticker.py:2110
    return ticks + offset
217 memory blocks (11640 bytes): __init__.py:372
    self._root = master._root()
165 memory blocks (11236 bytes): backend_agg.py:249
    self._renderer.draw_text_image(font, x, y + 1, angle, gc)
216 memory blocks (11232 bytes): __init__.py:625
    self._pos = -1
37 memory blocks (11144 bytes): _backend_tk.py:536
    self._buttons[text] = button = self._Button(
210 memory blocks (10955 bytes): mathtext.py:408
    self._output = output.lower()
64 memory blocks (10752 bytes): axis.py:878
    tick._apply_params(**kwtrans)
99 memory blocks (10731 bytes): backend_agg.py:170
    self._renderer.draw_path(gc, path, transform, rgbFace)
143 memory blocks (10296 bytes): weakref.py:66
    self_wr = ref(self)
143 memory blocks (10296 bytes): weakref.py:63
    self._func_ref = ref(func, _cb)
140 memory blocks (10080 bytes): ticker.py:2027
    self._nbins = kwargs.pop('nbins')
144 memory blocks (9608 bytes): __init__.py:221
    proxy = _weak_or_strong_ref(func, self._remove_proxy)
248 memory blocks (9520 bytes): transforms.py:2446
    return Affine2D(np.dot(self._b.get_affine().get_matrix(),
140 memory blocks (9520 bytes): ticker.py:1991
    steps = np.asarray(steps)
181 memory blocks (9104 bytes): _backend_tk.py:648
    b = tk.Button(master=self, text=text, command=command)
70 memory blocks (8960 bytes): axis.py:1376
    self.majorTicks.append(tick)
176 memory blocks (8864 bytes): transforms.py:2337
    return BlendedAffine2D(x_transform, y_transform)
109 memory blocks (8800 bytes): backend_bases.py:2796
    def notify_axes_change(fig):
74 memory blocks (8576 bytes): deprecation.py:386
    return func(*inner_args, **inner_kwargs)
159 memory blocks (8427 bytes): backend_agg.py:237
    font.set_text(s, 0, flags=flags)
2 memory blocks (8384 bytes): numeric.py:191
    a = empty(shape, dtype, order)
71 memory blocks (8184 bytes): backend_bases.py:1697
    self._is_idle_drawing = True
105 memory blocks (8120 bytes): __init__.py:2060
    self._od = collections.OrderedDict()
176 memory blocks (8088 bytes): __init__.py:859
    return self.after('idle', func, *args)
211 memory blocks (8016 bytes): _base.py:987
    mtransforms.ScaledTranslation(pad_points / 72, 0,
69 memory blocks (7952 bytes): gridspec.py:377
    self.left = left
69 memory blocks (7952 bytes): backend_bases.py:172
    self._texmanager = None
4 memory blocks (7736 bytes): __init__.py:2053
    delattr(obj, attr)
43 memory blocks (7664 bytes): axis.py:476
    super().__init__(*args, **kwargs)
210 memory blocks (7560 bytes): _base.py:961
    mtransforms.ScaledTranslation(-1 * pad_points / 72, 0,
210 memory blocks (7560 bytes): _base.py:911
    mtransforms.ScaledTranslation(0, pad_points / 72,
210 memory blocks (7560 bytes): _base.py:885
    mtransforms.ScaledTranslation(0, -1 * pad_points / 72,
70 memory blocks (7560 bytes): __init__.py:837
    def callit():
73 memory blocks (7320 bytes): figure.py:2894
    self._axobservers.connect("_axes_change_event", lambda arg: func(arg))
140 memory blocks (7280 bytes): _base.py:224
    self.axes = axes
141 memory blocks (7176 bytes): spines.py:437
    result = cls(axes, spine_type, path, **kwargs)
106 memory blocks (6962 bytes): lines.py:1152
    attr = f"_{name}"
108 memory blocks (6912 bytes): _backend_tk.py:193
    self._tkcanvas.bind(name, self.button_release_event)
108 memory blocks (6912 bytes): _backend_tk.py:190
    self._tkcanvas.bind(name, self.button_dblclick_event)
108 memory blocks (6912 bytes): _backend_tk.py:187
    self._tkcanvas.bind(name, self.button_press_event)
72 memory blocks (6912 bytes): figure.py:2266
    'scroll_event', lambda event: self.canvas.pick(event))
72 memory blocks (6912 bytes): figure.py:2264
    'button_press_event', lambda event: self.canvas.pick(event))
72 memory blocks (6912 bytes): _backend_tk.py:207
    def filter_destroy(event):
39 memory blocks (6904 bytes): axis.py:874
    tick._apply_params(**kwtrans)
111 memory blocks (6802 bytes): markers.py:321
    self, '_set_' + self.markers[marker])
50 memory blocks (6800 bytes): text.py:282
    return (
140 memory blocks (6720 bytes): spines.py:85
    self._patch_transform = mtransforms.IdentityTransform()
70 memory blocks (6720 bytes): _backend_tk.py:488
    def delayed_destroy():
39 memory blocks (6720 bytes): patches.py:727
    super().__init__(**kwargs)
38 memory blocks (6544 bytes): image.py:1675
    image.save(fname, **pil_kwargs)
395 memory blocks (6328 bytes): transforms.py:2006
    rotate_mtx = np.array([[a, -b, 0.0], [b, a, 0.0], [0.0, 0.0, 1.0]],
108 memory blocks (6154 bytes): __init__.py:377
    self._name = 'PY_VAR' + repr(_varnum)
115 memory blocks (6095 bytes): backend_agg.py:270
    font.set_text(s, 0.0, flags=flags)
70 memory blocks (5880 bytes): transforms.py:2664
    self._mtx = np.array([[x_scale, 0.0    , (-inl*x_scale)],
108 memory blocks (5760 bytes): figure.py:201
    self._align_label_groups = {"x": cbook.Grouper(), "y": cbook.Grouper()}
34 memory blocks (5712 bytes): _ufunc_config.py:431
    self.oldstate = seterr(**self.kwargs)
34 memory blocks (5712 bytes): _base.py:348
    kw = {**kw, **kwargs}  # Don't modify the original kw.
78 memory blocks (5616 bytes): _base.py:2287
    line._remove_method = self._children.remove
140 memory blocks (5600 bytes): _base.py:2423
    self._unit_change_handler, axis_name, event=object())
105 memory blocks (5600 bytes): transforms.py:532
    return Bbox(self._points +
19 memory blocks (5540 bytes): <frozen importlib._bootstrap>:241
13 memory blocks (5456 bytes): artist.py:1066
    ret.append(func(v))
105 memory blocks (5320 bytes): textpath.py:25
    self.mathtext_parser = MathTextParser('path')
70 memory blocks (5320 bytes): core.py:1940
    result = a.view(cls)
5 memory blocks (5192 bytes): TiffImagePlugin.py:923
    class ImageFileDirectory_v1(ImageFileDirectory_v2):
71 memory blocks (5104 bytes): figure.py:147
    self._validate = True
71 memory blocks (5104 bytes): _backend_tk.py:408
    self.window = window
71 memory blocks (5104 bytes): __init__.py:2286
    self.master = None
105 memory blocks (5040 bytes): markers.py:703
    self._transform = Affine2D().scale(1.0, -1.0)
105 memory blocks (5040 bytes): markers.py:697
    self._transform = Affine2D().scale(1.0, 1.0)
105 memory blocks (5040 bytes): markers.py:689
    self._transform = Affine2D().scale(1.0, 1.0)
105 memory blocks (5040 bytes): markers.py:683
    self._transform = Affine2D().scale(-1.0, 1.0)
52 memory blocks (4992 bytes): TiffImagePlugin.py:380
    def delegate(self, *args):
74 memory blocks (4984 bytes): __init__.py:2572
    master._last_child_ids = {}
106 memory blocks (4872 bytes): transforms.py:800
    frozen_bbox._minpos = self.minpos.copy()
2 memory blocks (4696 bytes): TiffImagePlugin.py:137
    OPEN_INFO = {
9 memory blocks (4640 bytes): artist.py:50
    return draw(artist, renderer)
1 memory blocks (4632 bytes): __init__.py:558
    super().__setitem__(k, v)
72 memory blocks (4608 bytes): _backend_tk.py:197
    self._tkcanvas.bind(name, self.scroll_event)
72 memory blocks (4608 bytes): __init__.py:2581
    self._w = '.' + name
36 memory blocks (4608 bytes): __init__.py:2299
    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)
6 memory blocks (4592 bytes): font_manager.py:1405
    return ft2font.FT2Font(
140 memory blocks (4480 bytes): __init__.py:604
    self._elements = self._elements[:self._pos + 1] + [o]
70 memory blocks (4480 bytes): axis.py:678
    self._minor_tick_kw = dict()
70 memory blocks (4480 bytes): axis.py:677
    self._major_tick_kw = dict()
139 memory blocks (4448 bytes): core.py:3057
    self._mask.shape = self.shape
71 memory blocks (4400 bytes): axis.py:1292
    minor_locs = [
78 memory blocks (4368 bytes): _base.py:2285
    line.set_label(f'_child{len(self._children)}')
71 memory blocks (4328 bytes): spines.py:541
    return cls(**d)
72 memory blocks (4264 bytes): scale.py:107
    axis.set_major_formatter(ScalarFormatter())
72 memory blocks (4224 bytes): scale.py:106
    axis.set_major_locator(AutoLocator())
72 memory blocks (4104 bytes): stride_tricks.py:358
    result.flags.writeable = True
73 memory blocks (3936 bytes): _backend_tk.py:671
    s = tk.Frame(master=self, height='18p', relief=tk.RIDGE, bg='DarkGray')
73 memory blocks (3920 bytes): _backend_tk.py:656
    b = tk.Checkbutton(
70 memory blocks (3920 bytes): axis.py:596
    instance.minorTicks = []
70 memory blocks (3920 bytes): axis.py:591
    instance.majorTicks = []
71 memory blocks (3800 bytes): transforms.py:2338
    return BlendedGenericTransform(x_transform, y_transform)
71 memory blocks (3784 bytes): scale.py:114
    axis.set_minor_locator(NullLocator())
71 memory blocks (3784 bytes): scale.py:108
    axis.set_minor_formatter(NullFormatter())
70 memory blocks (3780 bytes): ticker.py:816
    self.format = '%1.' + str(sigfigs) + 'f'
71 memory blocks (3760 bytes): scale.py:597
    return scale_cls(axis, **kwargs)
71 memory blocks (3760 bytes): axis.py:657
    self.minor = Ticker()
72 memory blocks (3744 bytes): widgets.py:37
    self._owner = None
72 memory blocks (3744 bytes): font.py:81
    self.name = name
73 memory blocks (3736 bytes): backend_bases.py:3493
    fig = fig_cls(*args, **kwargs)
71 memory blocks (3704 bytes): colors.py:1135
    self._vmin = _sanitize_extrema(vmin)
70 memory blocks (3640 bytes): spines.py:537
    self._dict = kwargs
70 memory blocks (3640 bytes): gridspec.py:560
    self._gridspec = gridspec
72 memory blocks (3456 bytes): _backend_tk.py:655
    var = tk.IntVar(master=self)
10 memory blocks (3368 bytes): GifImagePlugin.py:50
    class GifImageFile(ImageFile.ImageFile):
70 memory blocks (3360 bytes): transforms.py:2269
    self._affine = Affine2D(mtx)
70 memory blocks (3360 bytes): scale.py:121
    return IdentityTransform()
70 memory blocks (3360 bytes): __init__.py:2073
    self._od[key] = None
70 memory blocks (3360 bytes): axis.py:809
    self.callbacks = cbook.CallbackRegistry()
70 memory blocks (3360 bytes): axis.py:669
    self.offsetText = mtext.Text(np.nan, np.nan)
70 memory blocks (3360 bytes): axis.py:662
    self.label = mtext.Text(
70 memory blocks (3360 bytes): axis.py:656
    self.major = Ticker()
35 memory blocks (3360 bytes): backend_agg.py:93
    self._renderer = _RendererAgg(int(width), int(height), dpi)
209 memory blocks (3344 bytes): function_base.py:1452
    a = op(a[slice1], a[slice2])
37 memory blocks (3264 bytes): backend_agg.py:111
    self.draw_gouraud_triangles = self._renderer.draw_gouraud_triangles
10 memory blocks (3200 bytes): FastSlam.py:152
    self.yTrajectory.append(y)
10 memory blocks (3200 bytes): FastSlam.py:151
    self.xTrajectory.append(x)
72 memory blocks (3176 bytes): transforms.py:1074
    if np.any(self._points != other.get_points()):
71 memory blocks (3136 bytes): FastSlam.py:202
    plt.imshow(ogMap, cmap='gray', extent=[xRange[0], xRange[1], yRange[0], yRange[1]])
58 memory blocks (3132 bytes): backend_agg.py:248
    y = round(y + yo + yd)
10 memory blocks (2960 bytes): FastSlam.py:136
    self.prevRawMovingTheta, self.prevMatchedMovingTheta = None, None
183 memory blocks (2928 bytes): lines.py:657
    y = _to_unmasked_float_array(yconv).ravel()
4 memory blocks (2896 bytes): artist.py:179
    self._snap = None
2 memory blocks (2888 bytes): spines.py:61
    self.axis = None
10 memory blocks (2856 bytes): TiffImagePlugin.py:1779
    class AppendingTiffWriter:
36 memory blocks (2816 bytes): transforms.py:1742
    self.transform_path_affine = child.transform_path_affine
145 memory blocks (2800 bytes): arraysetops.py:352
    mask[1:] = aux[1:] != aux[:-1]
37 memory blocks (2768 bytes): __init__.py:2335
    self.protocol("WM_DELETE_WINDOW", self.destroy)
36 memory blocks (2768 bytes): _backend_tk.py:495
    self.window.after_idle(self.window.after, 0, delayed_destroy)
36 memory blocks (2728 bytes): figure.py:770
    projection_class, pkw = self._process_projection_requirements(
29 memory blocks (2666 bytes): TiffImagePlugin.py:676
    size = struct.calcsize("=" + fmt)
36 memory blocks (2664 bytes): _base.py:611
    self._stale_viewlims = {name: False for name in self._axis_names}
38 memory blocks (2648 bytes): _backend_tk.py:942
    manager = cls.FigureManager(canvas, num, window)
36 memory blocks (2592 bytes): font.py:98
    self._call  = tk.call
36 memory blocks (2592 bytes): font.py:97
    self._split = tk.splitlist
37 memory blocks (2544 bytes): transforms.py:1890
    self._inverted = Affine2D(inv(mtx), shorthand_name=shorthand_name)
9 memory blocks (2536 bytes): JpegImagePlugin.py:340
    class JpegImageFile(ImageFile.ImageFile):
6 memory blocks (2523 bytes): TiffImagePlugin.py:917
    setattr(ImageFileDirectory_v2, "load_" + name, _load_dispatch[idx][1])
35 memory blocks (2520 bytes): backend_agg.py:116
    self.copy_from_bbox = self._renderer.copy_from_bbox
35 memory blocks (2520 bytes): backend_agg.py:115
    self.draw_quad_mesh = self._renderer.draw_quad_mesh
35 memory blocks (2520 bytes): backend_agg.py:114
    self.draw_path_collection = self._renderer.draw_path_collection
35 memory blocks (2520 bytes): backend_agg.py:113
    self.draw_markers = self._renderer.draw_markers
35 memory blocks (2520 bytes): backend_agg.py:112
    self.draw_image = self._renderer.draw_image
35 memory blocks (2520 bytes): backend_agg.py:110
    self.draw_gouraud_triangle = self._renderer.draw_gouraud_triangle
35 memory blocks (2520 bytes): _base.py:2266
    image._remove_method = self._children.remove
3 memory blocks (2440 bytes): JpegImagePlugin.py:264
    MARKER = {
10 memory blocks (2432 bytes): TiffImagePlugin.py:1022
    class TiffImageFile(ImageFile.ImageFile):
36 memory blocks (2392 bytes): figure.py:72
    return next(((ind, a) for ind, a in self._elements if a == e), None)
37 memory blocks (2384 bytes): cm.py:362
    self.callbacks = cbook.CallbackRegistry()
37 memory blocks (2368 bytes): figure.py:2454
    self._constrained_layout_pads = dict()
36 memory blocks (2368 bytes): _base.py:2264
    image.set_label(f'_child{len(self._children)}')
36 memory blocks (2304 bytes): figure.py:2427
    self._tight_parameters = tight if isinstance(tight, dict) else {}
36 memory blocks (2304 bytes): _backend_tk.py:530
    self._buttons = {}
36 memory blocks (2304 bytes): _backend_tk.py:203
    root.bind("<MouseWheel>", self.scroll_event_windows, "+")
36 memory blocks (2304 bytes): _backend_tk.py:185
    self._tkcanvas.bind("<KeyRelease>", self.key_release)
36 memory blocks (2304 bytes): _backend_tk.py:184
    self._tkcanvas.bind("<Leave>", self.leave_notify_event)
36 memory blocks (2304 bytes): _backend_tk.py:183
    self._tkcanvas.bind("<Enter>", self.enter_notify_event)
36 memory blocks (2304 bytes): _backend_tk.py:182
    self._tkcanvas.bind("<Motion>", self.motion_notify_event)
36 memory blocks (2304 bytes): _backend_tk.py:181
    self._tkcanvas.bind("<Key>", self.key_press)
36 memory blocks (2304 bytes): _backend_tk.py:180
    self._tkcanvas.bind("<Map>", self._update_device_pixel_ratio)
36 memory blocks (2304 bytes): _backend_tk.py:179
    self._tkcanvas.bind("<Configure>", self.resize)
36 memory blocks (2304 bytes): __init__.py:2287
    self.children = {}
2 memory blocks (2296 bytes): lines.py:724
    @allow_rasterization
9 memory blocks (2289 bytes): BmpImagePlugin.py:60
    class BmpImageFile(ImageFile.ImageFile):
5 memory blocks (2288 bytes): transforms.py:2447
    self._a.get_affine().get_matrix()))
37 memory blocks (2264 bytes): _backend_tk.py:925
    window = tk.Tk(className="matplotlib")
37 memory blocks (2256 bytes): _backend_tk.py:435
    toolbar = NavigationToolbar2Tk(self.canvas, self.window)
36 memory blocks (2248 bytes): _axes.py:5482
    im = mimage.AxesImage(self, cmap, norm, interpolation,
70 memory blocks (2240 bytes): gridspec.py:131
    height_ratios = [1] * self._nrows
70 memory blocks (2240 bytes): gridspec.py:109
    width_ratios = [1] * self._ncols
70 memory blocks (2240 bytes): axis.py:598
    instance.minorTicks.append(tick)
35 memory blocks (2240 bytes): core.py:2962
    _optinfo = {}
35 memory blocks (2240 bytes): transforms.py:1746
    self.get_matrix = child.get_matrix
35 memory blocks (2240 bytes): transforms.py:1745
    self.inverted = child.inverted
35 memory blocks (2240 bytes): transforms.py:1744
    self.get_affine = child.get_affine
35 memory blocks (2240 bytes): transforms.py:1743
    self.transform_path_non_affine = child.transform_path_non_affine
35 memory blocks (2240 bytes): transforms.py:1741
    self.transform_path = child.transform_path
35 memory blocks (2240 bytes): transforms.py:1740
    self.transform_non_affine = child.transform_non_affine
35 memory blocks (2240 bytes): transforms.py:1739
    self.transform_affine = child.transform_affine
35 memory blocks (2240 bytes): transforms.py:1738
    self.transform = child.transform
35 memory blocks (2240 bytes): image.py:984
    self.sticky_edges.y[:] = [ymin, ymax]
35 memory blocks (2240 bytes): image.py:983
    self.sticky_edges.x[:] = [xmin, xmax]
35 memory blocks (2240 bytes): image.py:927
    self._extent = extent
35 memory blocks (2240 bytes): figure.py:781
    ax._remove_method = self.delaxes
35 memory blocks (2240 bytes): backend_agg.py:443
    key = w, h, self.figure.dpi
37 memory blocks (2232 bytes): figure.py:2303
    subplotpars = SubplotParams()
50 memory blocks (2228 bytes): text.py:283
    x, y, self.get_text(), hash(self._fontproperties),
37 memory blocks (2216 bytes): _backend_tk.py:545
    self._label_font = tkinter.font.Font(root=window, size=10)
36 memory blocks (2208 bytes): gridspec.py:225
    return GridSpec(nrows, ncols, figure=figure)
1 memory blocks (2208 bytes): ScanMatcher_OGBased.py:20
    def frameSearchSpace(self, estimatedX, estimatedY, unitLength, sigma, missMatchProbAtCoarse):
37 memory blocks (2192 bytes): _backend_tk.py:556
    self._message_label = tk.Label(master=self, font=self._label_font,
37 memory blocks (2192 bytes): _backend_tk.py:172
    self._tkcanvas = tk.Canvas(
37 memory blocks (2184 bytes): _backend_tk.py:555
    self.message = tk.StringVar(master=self)
36 memory blocks (2176 bytes): _base.py:746
    self.yaxis = maxis.YAxis(self)
36 memory blocks (2168 bytes): _base.py:743
    self.xaxis = maxis.XAxis(self)
10 memory blocks (2160 bytes): BmpImagePlugin.py:277
    class DibImageFile(BmpImageFile):
54 memory blocks (2148 bytes): core.py:3049
    _mask = _mask.view()
36 memory blocks (2144 bytes): backend_agg.py:447
    self.renderer = RendererAgg(w, h, self.figure.dpi)
36 memory blocks (2144 bytes): _base.py:1124
    return mpatches.Rectangle((0.0, 0.0), 1.0, 1.0)
37 memory blocks (2136 bytes): backend_bases.py:2933
    self._nav_stack = cbook.Stack()
36 memory blocks (2136 bytes): figure.py:772
    ax = subplot_class_factory(projection_class)(self, *args, **pkw)
36 memory blocks (2136 bytes): _base.py:1238
    self._get_patches_for_fill = _process_plot_var_args(self, 'fill')
38 memory blocks (2128 bytes): __init__.py:626
    self._elements = []
37 memory blocks (2128 bytes): backend_bases.py:1704
    self.widgetlock = widgets.LockDraw()
36 memory blocks (2120 bytes): _base.py:826
    self.transLimits = mtransforms.BboxTransformFrom(
19 memory blocks (2117 bytes): <frozen importlib._bootstrap_external>:128
78 memory blocks (2104 bytes): colors.py:100
    ret = ex.item()
36 memory blocks (2104 bytes): gridspec.py:262
    return SubplotSpec(self, num1, num2)
36 memory blocks (2104 bytes): cm.py:559
    norm = colors.Normalize()
36 memory blocks (2104 bytes): _base.py:821
    self.transScale = mtransforms.TransformWrapper(
35 memory blocks (2100 bytes): image.py:779
    s = s.lower()
36 memory blocks (2080 bytes): _base.py:1242
    self._mouseover_set = _OrderedSet()
37 memory blocks (2064 bytes): colors.py:615
    mask_bad = X.mask if np.ma.is_masked(X) else np.isnan(X)  # Mask nan's.
5 memory blocks (2064 bytes): markers.py:251
    self._marker_function()
17 memory blocks (2024 bytes): OccupancyGrid.py:12
    self.OccupancyGridX, self.OccupancyGridY = np.meshgrid(x, y)
36 memory blocks (2016 bytes): figure.py:2773
    self.legends = []
36 memory blocks (2016 bytes): figure.py:2772
    self.images = []
36 memory blocks (2016 bytes): figure.py:2771
    self.texts = []
36 memory blocks (2016 bytes): figure.py:2770
    self.patches = []
36 memory blocks (2016 bytes): figure.py:2769
    self.lines = []
36 memory blocks (2016 bytes): figure.py:2768
    self.artists = []
36 memory blocks (2016 bytes): figure.py:2319
    self._gridspecs = []
36 memory blocks (2016 bytes): figure.py:213
    self.subfigs = []
36 memory blocks (2016 bytes): __init__.py:2328
    self._tclCommands = []
35 memory blocks (1990 bytes): __init__.py:851
    return self.tk.call('after', ms, name)
4 memory blocks (1976 bytes): deprecation.py:456
    return func(*args, **kwargs)
36 memory blocks (1971 bytes): font.py:80
    name = "font" + str(next(self.counter))
35 memory blocks (1968 bytes): __init__.py:283
    for cid, ref in list(self.callbacks.get(s, {}).items()):
35 memory blocks (1960 bytes): figure.py:773
    key = (projection_class, pkw)
35 memory blocks (1960 bytes): figure.py:98
    super().push((self._ind, a))
35 memory blocks (1960 bytes): backend_agg.py:94
    self._filter_renderers = []
35 memory blocks (1960 bytes): _base.py:1247
    self.containers = []
35 memory blocks (1960 bytes): _base.py:1243
    self.child_axes = []
35 memory blocks (1960 bytes): _base.py:1241
    self._children = []
35 memory blocks (1960 bytes): _base.py:620
    self._colorbars = []
27 memory blocks (1950 bytes): Image.py:3173
    EXTENSION[extension.lower()] = id.upper()
72 memory blocks (1928 bytes): gridspec.py:675
    rows, cols = np.unravel_index([self.num1, self.num2], (nrows, ncols))
7 memory blocks (1920 bytes): FastSlam.py:76
    class Particle:
37 memory blocks (1896 bytes): _backend_tk.py:409
    super().__init__(canvas, num)
19 memory blocks (1870 bytes): posixpath.py:372
    path = sep*initial_slashes + path
46 memory blocks (1850 bytes): transforms.py:893
    points, minpos, changed = update_path_extents(
36 memory blocks (1848 bytes): _pylab_helpers.py:67
    manager.destroy()
115 memory blocks (1840 bytes): transforms.py:1510
    return res.reshape(-1)
4 memory blocks (1832 bytes): ticker.py:2061
    nbins = np.clip(self.axis.get_tick_space(),
4 memory blocks (1792 bytes): transforms.py:669
    y0 = np.min([bbox.ymin for bbox in bboxes])
4 memory blocks (1760 bytes): patches.py:278
    return self.get_patch_transform() + artist.Artist.get_transform(self)
3 memory blocks (1760 bytes): sre_compile.py:804
    return _sre.compile(
6 memory blocks (1752 bytes): FastSlam.py:22
    class ParticleFilter:
36 memory blocks (1728 bytes): figure.py:2775
    self._axobservers = cbook.CallbackRegistry()
36 memory blocks (1728 bytes): figure.py:2758
    self.callbacks = cbook.CallbackRegistry()
36 memory blocks (1728 bytes): figure.py:2312
    self._axstack = _AxesStack()  # track all figure axes and current axes
36 memory blocks (1728 bytes): figure.py:2292
    self.patch = Rectangle(
36 memory blocks (1728 bytes): figure.py:2289
    self.transFigure = BboxTransformTo(self.bbox)
36 memory blocks (1728 bytes): figure.py:2287
    self.bbox = TransformedBbox(self.bbox_inches, self.dpi_scale_trans)
36 memory blocks (1728 bytes): figure.py:2284
    self.dpi_scale_trans = Affine2D().scale(dpi)
36 memory blocks (1728 bytes): figure.py:206
    self._localaxes = _AxesStack()  # track all axes and current axes
36 memory blocks (1728 bytes): _backend_tk.py:941
    canvas = cls.FigureCanvas(figure, master=window)
36 memory blocks (1728 bytes): _backend_tk.py:551
    label = tk.Label(master=self, font=self._label_font,
36 memory blocks (1728 bytes): _backend_tk.py:175
    self._tkphoto = tk.PhotoImage(
4 memory blocks (1728 bytes): transforms.py:1793
    return np.all(self.get_matrix() == other.get_matrix())
17 memory blocks (1704 bytes): TiffImagePlugin.py:683
    _write_dispatch[idx] = lambda self, *values: (  # noqa: F821
70 memory blocks (1680 bytes): backend_agg.py:442
    w, h = self.figure.bbox.size
35 memory blocks (1680 bytes): cycler.py:241
    for left in self._left:
35 memory blocks (1680 bytes): transforms.py:811
    return Bbox([[np.inf, np.inf], [-np.inf, -np.inf]])
35 memory blocks (1680 bytes): transforms.py:260
    return Bbox(self.get_points().copy())
35 memory blocks (1680 bytes): spines.py:434
    path = mpath.Path([(0.999, 1.0), (0.999, 1.0)])
35 memory blocks (1680 bytes): spines.py:432
    path = mpath.Path([(0.999, 0.0), (0.999, 0.0)])
35 memory blocks (1680 bytes): spines.py:430
    path = mpath.Path([(1.0, 0.999), (1.0, 0.999)])
35 memory blocks (1680 bytes): spines.py:428
    path = mpath.Path([(0.0, 0.999), (0.0, 0.999)])
35 memory blocks (1680 bytes): colors.py:1139
    self.callbacks = cbook.CallbackRegistry()
35 memory blocks (1680 bytes): backend_agg.py:97
    self.mathtext_parser = MathTextParser('Agg')
35 memory blocks (1680 bytes): backend_bases.py:173
    self._text2path = textpath.TextToPath()
35 memory blocks (1680 bytes): axis.py:2296
    self.axes.transAxes, mtransforms.IdentityTransform()),
35 memory blocks (1680 bytes): axis.py:2288
    mtransforms.IdentityTransform(), self.axes.transAxes),
35 memory blocks (1680 bytes): axis.py:2028
    self.axes.transAxes, mtransforms.IdentityTransform()),
35 memory blocks (1680 bytes): axis.py:2021
    self.axes.transAxes, mtransforms.IdentityTransform()),
35 memory blocks (1680 bytes): _base.py:1498
    self.titleOffsetTrans = mtransforms.ScaledTranslation(
35 memory blocks (1680 bytes): _base.py:1274
    self._right_title = mtext.Text(
35 memory blocks (1680 bytes): _base.py:1269
    self._left_title = mtext.Text(
35 memory blocks (1680 bytes): _base.py:1263
    self.title = mtext.Text(
35 memory blocks (1680 bytes): _base.py:1237
    self._get_lines = _process_plot_var_args(self)
35 memory blocks (1680 bytes): _base.py:1202
    self.callbacks = cbook.CallbackRegistry()
35 memory blocks (1680 bytes): _base.py:827
    mtransforms.TransformedBbox(self._viewLim, self.transScale))
35 memory blocks (1680 bytes): _base.py:816
    self.transAxes = mtransforms.BboxTransformTo(self.bbox)
35 memory blocks (1680 bytes): _base.py:755
    self.bbox = mtransforms.TransformedBbox(self._position,
22 memory blocks (1674 bytes): artist.py:1171
    orig_vals = {k: getattr(self, f"get_{k}")() for k in kwargs}
51 memory blocks (1632 bytes): text.py:831
    y = float(self.convert_yunits(self._y))
50 memory blocks (1608 bytes): text.py:830
    x = float(self.convert_xunits(self._x))
50 memory blocks (1600 bytes): ScanMatcher_OGBased.py:101
    rv = - (1 / (2 * self.moveRSigma ** 2)) * (np.sqrt((xv * unitLength) ** 2 + (yv * unitLength) ** 2) - (estMovingDist)) ** 2
16 memory blocks (1600 bytes): TiffImagePlugin.py:679
    lambda self, data, legacy_api=True: (
40 memory blocks (1552 bytes): OccupancyGrid.py:104
    xIdx = (np.rint((x - self.mapXLim[0]) / self.unitGridSize)).astype(int)
2 memory blocks (1542 bytes): spines.py:330
    def get_spine_transform(self):
3 memory blocks (1536 bytes): image.py:132
    a.draw(renderer)
7 memory blocks (1528 bytes): PpmImagePlugin.py:47
    class PpmImageFile(ImageFile.ImageFile):
9 memory blocks (1512 bytes): _ufunc_config.py:436
    seterr(**self.oldstate)
3 memory blocks (1488 bytes): colors.py:1241
    (vmax,), _ = self.process_value(self.vmax)
2 memory blocks (1450 bytes): lines.py:649
    def recache(self, always=False):
3 memory blocks (1448 bytes): _backend_tk.py:640
    with Image.open(button._image_file.replace('.png', '_large.png')
2 memory blocks (1448 bytes): backend_bases.py:2946
    self.mode = _Mode.NONE  # a mode string for the status bar
20 memory blocks (1440 bytes): <frozen importlib._bootstrap>:359
20 memory blocks (1422 bytes): _base.py:2940
    return tuple(getattr(self, f"{name}axis") for name in self._axis_names)
7 memory blocks (1416 bytes): font_manager.py:1307
    return self._findfont_cached(
44 memory blocks (1408 bytes): numeric.py:1460
    result = transpose(order)
4 memory blocks (1408 bytes): FastSlam.py:164
    def processSensorData(pf, sensorData, plotTrajectory = True):
14 memory blocks (1400 bytes): fractions.py:368
    def reverse(b, a):
14 memory blocks (1400 bytes): fractions.py:356
    def forward(a, b):
2 memory blocks (1398 bytes): text.py:290
    def _get_layout(self, renderer):
43 memory blocks (1376 bytes): _base.py:506
    y = y[:, np.newaxis]
3 memory blocks (1368 bytes): _base.py:1891
    self._set_position(pb1.anchored(self.get_anchor(), pb), 'active')
3 memory blocks (1368 bytes): __init__.py:166
    root = Path(__file__).resolve().parents[2]
3 memory blocks (1360 bytes): deprecation.py:299
    return func(*args, **kwargs)
3 memory blocks (1344 bytes): axis.py:2525
    ends = ends.transformed(self.axes.transAxes -
3 memory blocks (1320 bytes): backend_bases.py:1709
    self.toolbar = None  # NavigationToolbar2 will set me
2 memory blocks (1320 bytes): _ni_support.py:74
    def _get_output(output, input, shape=None, complex_output=False):
3 memory blocks (1304 bytes): ImageOps.py:339
    def deform(image, deformer, resample=Image.BILINEAR):
39 memory blocks (1296 bytes): OccupancyGrid.py:105
    yIdx = (np.rint((y - self.mapYLim[0]) / self.unitGridSize)).astype(int)
18 memory blocks (1296 bytes): ScanMatcher_OGBased.py:10
    self.searchRadius = searchRadius
3 memory blocks (1296 bytes): axis.py:772
    return self._scale.limit_range_for_scale(vmin, vmax, self.get_minpos())
2 memory blocks (1280 bytes): _internal.py:547
    if oldtype == newtype:
3 memory blocks (1272 bytes): __init__.py:2055
    setattr(obj, attr, orig)
3 memory blocks (1272 bytes): artist.py:301
    self.stale_callback(self, val)
78 memory blocks (1248 bytes): lines.py:401
    self._yorig = np.asarray([])
2 memory blocks (1243 bytes): markers.py:295
    def _set_marker(self, marker):
3 memory blocks (1240 bytes): axis.py:1175
    self.offsetText.set_text(self.major.formatter.get_offset())
15 memory blocks (1232 bytes): Image.py:429
    return encoder(mode, *args + extra)
18 memory blocks (1224 bytes): <frozen importlib._bootstrap>:49
36 memory blocks (1216 bytes): twodim_base.py:155
    return m[::-1, ...]
4 memory blocks (1216 bytes): FastSlam.py:168
    for key in sorted(sensorData.keys()):
3 memory blocks (1208 bytes): axis.py:1072
    loc_t = self.get_transform().transform(tick.get_loc())
50 memory blocks (1200 bytes): backend_agg.py:275
    d /= 64.0
50 memory blocks (1200 bytes): backend_agg.py:274
    h /= 64.0
50 memory blocks (1200 bytes): backend_agg.py:273
    w /= 64.0  # convert from subpixels
3 memory blocks (1200 bytes): spines.py:240
    low, high = self.axes.viewLim.intervalx
4 memory blocks (1184 bytes): contextlib.py:453
    self._exit_callbacks = deque()
23 memory blocks (1176 bytes): function_base.py:5150
    output = [np.asanyarray(x).reshape(s0[:i] + (-1,) + s0[i + 1:])
2 memory blocks (1176 bytes): BmpImagePlugin.py:291
    SAVE = {
3 memory blocks (1136 bytes): __init__.py:1416
    return func(ax, *map(sanitize_sequence, args), **kwargs)
2 memory blocks (1132 bytes): _filters.py:84
    @_ni_docstrings.docfiller
2 memory blocks (1123 bytes): lines.py:276
    def __init__(self, xdata, ydata,
70 memory blocks (1120 bytes): gridspec.py:203
    fig_lefts, fig_rights = (left + cell_ws).reshape((-1, 2)).T
70 memory blocks (1120 bytes): gridspec.py:202
    fig_tops, fig_bottoms = (top - cell_hs).reshape((-1, 2)).T
8 memory blocks (1120 bytes): abc.py:107
    _abc_init(cls)
2 memory blocks (1112 bytes): arraysetops.py:323
    def _unique1d(ar, return_index=False, return_inverse=False,
1 memory blocks (1112 bytes): PngImagePlugin.py:715
    self._text = None
1 memory blocks (1112 bytes): JpegImagePlugin.py:46
    from ._binary import i32be as i32
69 memory blocks (1104 bytes): transforms.py:492
    ll, ul, lr = transform.transform(np.array(
17 memory blocks (1104 bytes): TiffImagePlugin.py:687
    list(
11 memory blocks (1104 bytes): FastSlam.py:34
    p = Particle(ogParameters, smParameters)
2 memory blocks (1104 bytes): OccupancyGrid.py:85
    self.OccupancyGridY = np.insert(self.OccupancyGridY, [position], yv, axis=axis)
68 memory blocks (1088 bytes): _filters.py:189
    phi_x = numpy.exp(-0.5 / sigma2 * x ** 2)
11 memory blocks (1064 bytes): FastSlam.py:81
    og = OccupancyGrid(initMapXLength, initMapYLength, initXY, unitGridSize, lidarFOV, numSamplesPerRev, lidarMaxRange, wallThickness)
2 memory blocks (1056 bytes): colors.py:1255
    result = np.ma.array(resdat, mask=result.mask, copy=False)
2 memory blocks (1056 bytes): axis.py:1170
    self._update_label_position(renderer)
2 memory blocks (1056 bytes): pydevd_comm.py:368
    cmd = self._cmd_queue.get(True, 0.1)
3 memory blocks (1048 bytes): PngImagePlugin.py:1348
    ImageFile._save(im, _idat(fp, chunk), [("zip", (0, 0) + im.size, 0, rawmode)])
2 memory blocks (1048 bytes): backend_agg.py:541
    mpl.image.imsave(
2 memory blocks (1041 bytes): path.py:99
    def __init__(self, vertices, codes=None, _interpolation_steps=1,
2 memory blocks (1039 bytes): arraysetops.py:138
    @array_function_dispatch(_unique_dispatcher)
4 memory blocks (1024 bytes): transforms.py:2409
    is_affine = property(lambda self: self._a.is_affine and self._b.is_affine)
2 memory blocks (1024 bytes): ScanMatcher_OGBased.py:120
    uniqueRotatedPxPyIdx = np.unique(np.column_stack((rotatedPxIdx, rotatedPyIdx)), axis=0)
2 memory blocks (984 bytes): backend_bases.py:3494
    return cls.new_figure_manager_given_figure(num, fig)
2 memory blocks (976 bytes): stride_tricks.py:546
    return [_broadcast_to(array, shape, subok=subok, readonly=False)
2 memory blocks (976 bytes): path.py:633
    return Bbox([xys.min(axis=0), xys.max(axis=0)])
2 memory blocks (976 bytes): __init__.py:1665
    self.tk.call(_flatten((self._w, cmd)) + self._options(cnf))
2 memory blocks (976 bytes): ScanMatcher_OGBased.py:141
    confidence = np.sum(np.exp(convTotal))
3 memory blocks (971 bytes): PngImagePlugin.py:187
    return getattr(self, "chunk_" + cid.decode("ascii"))(pos, length)
4 memory blocks (968 bytes): ticker.py:1984
    self.set_params(**{**self.default_params, **kwargs})
2 memory blocks (968 bytes): arraysetops.py:287
    ar = ar.reshape(orig_shape[0], np.prod(orig_shape[1:], dtype=np.intp))
2 memory blocks (968 bytes): axis.py:1174
    self._update_offset_text_position(ticklabelBoxes, ticklabelBoxes2)
2 memory blocks (960 bytes): axis.py:1085
    return ([tick.label1.get_window_extent(renderer)
4 memory blocks (952 bytes): __init__.py:1730
    to_canonical = {alias: canonical
2 memory blocks (952 bytes): transforms.py:344
    return np.max(self.get_points()[:, 1])
2 memory blocks (952 bytes): image.py:180
    dispy = np.abs(np.diff(disp[:, 1]))
2 memory blocks (952 bytes): _base.py:935
    return self.spines.right.get_spine_transform()
2 memory blocks (948 bytes): getlimits.py:484
    def __new__(cls, dtype):
3 memory blocks (944 bytes): ticker.py:224
    return [self(value, i) for i, value in enumerate(values)]
2 memory blocks (944 bytes): _subplots.py:36
    self.set_subplotspec(SubplotSpec._from_subplot_args(fig, args))
2 memory blocks (944 bytes): artist.py:1164
    return self.update(kwargs)
18 memory blocks (936 bytes): <frozen importlib._bootstrap_external>:1043
11 memory blocks (920 bytes): Image.py:406
    return decoder(mode, *args + extra)
2 memory blocks (920 bytes): arraysetops.py:314
    uniq = np.moveaxis(uniq, 0, axis)
2 memory blocks (920 bytes): _base.py:1141
    return OrderedDict((side, mspines.Spine.linear_spine(self, side))
3 memory blocks (912 bytes): fractions.py:538
    __mod__, __rmod__ = _operator_fallbacks(_mod, operator.mod)
2 memory blocks (912 bytes): ticker.py:795
    loc_range = np.ptp(locs)
2 memory blocks (912 bytes): image.py:513
    else np.ones_like(A, np.float32))
2 memory blocks (912 bytes): figure.py:82
    return super().bubble(self._entry_from_axes(a))
2 memory blocks (904 bytes): gridspec.py:435
    subplotpars.update(**{k: getattr(self, k) for k in self._AllowedKeys})
2 memory blocks (904 bytes): cm.py:570
    self._id_norm = self.norm.callbacks.connect('changed',
2 memory blocks (896 bytes): font_manager.py:1340
    + self.score_size(prop.get_size(), font.size))
2 memory blocks (896 bytes): colors.py:527
    ind = np.searchsorted(x, xind)[1:-1]
2 memory blocks (896 bytes): axis.py:177
    self._apply_tickdir(tickdir)
2 memory blocks (888 bytes): gridspec.py:200
    cell_ws = np.cumsum(np.column_stack([sep_widths, cell_widths]).flat)
2 memory blocks (880 bytes): _base.py:1198
    for name, spine in self.spines.items():
2 memory blocks (872 bytes): backend_bases.py:2456
    return self.callbacks.disconnect(cid)
2 memory blocks (872 bytes): _base.py:621
    self.spines = mspines.Spines.from_dict(self._gen_axes_spines())
36 memory blocks (864 bytes): axis.py:2392
    (x, top + self.OFFSETTEXTPAD * self.figure.dpi / 72)
27 memory blocks (864 bytes): _base.py:2286
    self._children.append(line)
2 memory blocks (864 bytes): core.py:3089
    m = reduce(mask_or, [getmaskarray(arg) for arg in input_args])
2 memory blocks (864 bytes): ticker.py:811
    if np.abs(locs - np.round(locs, decimals=sigfigs)).max() < thresh:
2 memory blocks (864 bytes): axis.py:1375
    tick = self._get_tick(major=True)
6 memory blocks (863 bytes): TiffImagePlugin.py:658
    TYPES[idx] = func.__name__[5:].replace("_", " ")
6 memory blocks (856 bytes): TiffImagePlugin.py:659
    _load_dispatch[idx] = size, func  # noqa: F821
2 memory blocks (848 bytes): transforms.py:1503
    res = self.transform_affine(self.transform_non_affine(values))
2 memory blocks (848 bytes): transforms.py:668
    x1 = np.max([bbox.xmax for bbox in bboxes])
2 memory blocks (848 bytes): ImageFile.py:215
    self.tile = [
2 memory blocks (843 bytes): transforms.py:2226
    def transform_non_affine(self, points):
35 memory blocks (840 bytes): patches.py:411
    self._linewidth = float(w)
35 memory blocks (840 bytes): backend_bases.py:3027
    time.time(), getattr(self, "_draw_time", -np.inf))
35 memory blocks (840 bytes): axis.py:2366
    (left - self.labelpad * self.figure.dpi / 72, y)
35 memory blocks (840 bytes): axis.py:2130
    y = bottom - self.OFFSETTEXTPAD * self.figure.dpi / 72
35 memory blocks (840 bytes): axis.py:2098
    (x, bottom - self.labelpad * self.figure.dpi / 72)
35 memory blocks (840 bytes): _base.py:1638
    aspect = float(aspect)  # raise ValueError if necessary
35 memory blocks (840 bytes): _base.py:1499
    0.0, title_offset_points / 72,
2 memory blocks (840 bytes): transforms.py:667
    x0 = np.min([bbox.xmin for bbox in bboxes])
2 memory blocks (840 bytes): pyplot.py:3020
    return gca()._sci(im)
2 memory blocks (832 bytes): __init__.py:1304
    return np.atleast_1d(x)
2 memory blocks (832 bytes): __init__.py:284
    func = ref()
2 memory blocks (832 bytes): axis.py:1050
    tick.update_position(loc)
2 memory blocks (832 bytes): _base.py:4052
    bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)
1 memory blocks (832 bytes): deprecation.py:400
    elif any(name in d and d[name] != _deprecated_parameter
1 memory blocks (832 bytes): Image.py:2994
    im = _open_core(fp, filename, prefix, formats)
1 memory blocks (832 bytes): sre_parse.py:444
    itemsappend(_parse(source, state, verbose, nested + 1,
1 memory blocks (832 bytes): inspect.py:3179
    return self._bind(args, kwargs)
2 memory blocks (831 bytes): _internal.py:436
    def _promote_fields(dt1, dt2):
2 memory blocks (824 bytes): numeric.py:608
    return transpose(nonzero(a))
1 memory blocks (824 bytes): ScanMatcher_OGBased.py:71
    matchedPx, matchedPy, matchedReading, convTotal, fineConfidence = self.searchToMatch(probSP, matchedReading['x'],
2 memory blocks (821 bytes): axis.py:1607
    def _set_formatter(self, formatter, level):
2 memory blocks (816 bytes): __init__.py:287
    func(*args, **kwargs)
2 memory blocks (816 bytes): axis.py:1283
    minor_locs = self.minor.locator()
2 memory blocks (816 bytes): _base.py:4510
    return [
1 memory blocks (816 bytes): image.py:956
    return self._make_image(self._A, bbox, transformed_bbox, clip,
3 memory blocks (808 bytes): TiffImagePlugin.py:1477
    SAVE_INFO = {
2 memory blocks (808 bytes): patches.py:575
    gc.set_snap(self.get_snap())
2 memory blocks (808 bytes): OccupancyGrid.py:142
    occupiedIdx = np.argwhere(
2 memory blocks (800 bytes): ticker.py:2078
    istep = np.nonzero(steps >= raw_step)[0][0]
2 memory blocks (800 bytes): patches.py:559
    renderer.open_group('patch', self.get_gid())
1 memory blocks (800 bytes): text.py:910
    bbox, info, descent = self._get_layout(self._renderer)
2 memory blocks (792 bytes): transforms.py:2408
    depth = property(lambda self: self._a.depth + self._b.depth)
2 memory blocks (792 bytes): patches.py:608
    path = self.get_path()
2 memory blocks (788 bytes): text.py:671
    @artist.allow_rasterization
3 memory blocks (784 bytes): figure.py:3019
    self.canvas.print_figure(fname, **kwargs)
2 memory blocks (784 bytes): image.py:954
    clip = ((self.get_clip_box() or self.axes.bbox) if self.get_clip_on()
2 memory blocks (784 bytes): __init__.py:2601
    self.tk.call(
5 memory blocks (760 bytes): FastSlam.py:173
    snapshot = tracemalloc.take_snapshot()
2 memory blocks (759 bytes): lines.py:1267
    def update_from(self, other):
14 memory blocks (756 bytes): backend_agg.py:247
    x = round(x + xo + xd)
6 memory blocks (744 bytes): __init__.py:2359
    exec('from tkinter import *', dir)
2 memory blocks (744 bytes): gridspec.py:113
    self._col_width_ratios = width_ratios
2 memory blocks (744 bytes): OccupancyGrid.py:21
    self.numSamplesPerRev = numSamplesPerRev
1 memory blocks (744 bytes): _base.py:3033
    self.apply_aspect()
2 memory blocks (736 bytes): ticker.py:2044
    self._extended_steps = self._staircase(self._steps)
6 memory blocks (722 bytes): _ni_support.py:79
    output = numpy.zeros(shape, dtype=input.dtype.name)
20 memory blocks (720 bytes): OccupancyGrid.py:20
    self.mapYLim = [self.OccupancyGridY[0, 0], self.OccupancyGridY[-1, 0]]
20 memory blocks (720 bytes): OccupancyGrid.py:19
    self.mapXLim = [self.OccupancyGridX[0, 0], self.OccupancyGridX[0, -1]]
1 memory blocks (704 bytes): FastSlam.py:141
    matchedReading, confidence = self.sm.matchScan(estimatedReading, estMovingDist, estMovingTheta, count, matchMax=False)
4 memory blocks (696 bytes): font_manager.py:1424
    return _get_font(filename, hinting_factor,
3 memory blocks (691 bytes): __init__.py:657
    def __getitem__(self, key):
1 memory blocks (688 bytes): Image.py:2212
    save_handler(self, fp, filename)
5 memory blocks (680 bytes): backend_bases.py:1696
    self._fix_ipython_backend2gui()
1 memory blocks (664 bytes): deprecation.py:387
    arguments = signature.bind(*inner_args, **inner_kwargs).arguments
1 memory blocks (664 bytes): PngImagePlugin.py:675
    if not _accept(self.fp.read(8)):
1 memory blocks (664 bytes): sre_compile.py:200
    _compile(code, av[1], flags)
1 memory blocks (664 bytes): inspect.py:3172
    return self._bound_arguments_cls(self, arguments)
2 memory blocks (658 bytes): text.py:872
    def get_window_extent(self, renderer=None, dpi=None):
3 memory blocks (656 bytes): _filters.py:375
    axes = [(axes[ii], sigmas[ii], orders[ii], modes[ii], radiuses[ii])
1 memory blocks (656 bytes): gridspec.py:677
    gridspec.get_grid_positions(figure)
1 memory blocks (656 bytes): _base.py:312
    yield from self._plot_args(this, kwargs)
2 memory blocks (653 bytes): <frozen importlib._bootstrap>:1053
2 memory blocks (649 bytes): artist.py:1138
    def update_from(self, other):
2 memory blocks (640 bytes): TiffImagePlugin.py:135
    COMPRESSION_INFO_REV = {v: k for k, v in COMPRESSION_INFO.items()}
2 memory blocks (640 bytes): TiffImagePlugin.py:114
    COMPRESSION_INFO = {
2 memory blocks (640 bytes): FastSlam.py:189
    plt.figure(figsize=(19.20, 19.20))
7 memory blocks (632 bytes): Image.py:3128
    OPEN[id] = factory, accept
1 memory blocks (632 bytes): FastSlam.py:145
    self.og.updateOccupancyGrid(matchedReading)
2 memory blocks (630 bytes): artist.py:32
    @wraps(draw)
1 memory blocks (624 bytes): patches.py:612
    draw_path(tpath, affine,
1 memory blocks (624 bytes): Image.py:1125
    self.load()
11 memory blocks (616 bytes): transforms.py:200
    for parent in list(self._parents.values()):
9 memory blocks (616 bytes): TiffImagePlugin.py:677
    _load_dispatch[idx] = (  # noqa: F821
3 memory blocks (616 bytes): TiffImagePlugin.py:294
    class IFDRational(Rational):
2 memory blocks (616 bytes): stride_tricks.py:340
    def _broadcast_to(array, shape, subok, readonly):
1 memory blocks (616 bytes): FastSlam.py:237
    main()
1 memory blocks (616 bytes): FastSlam.py:234
    processSensorData(pf, sensorData, plotTrajectory=True)
7 memory blocks (610 bytes): Image.py:3150
    SAVE[id.upper()] = driver
7 memory blocks (610 bytes): Image.py:3139
    MIME[id.upper()] = mimetype
4 memory blocks (600 bytes): artist.py:1176
    self.set(**orig_vals)
3 memory blocks (600 bytes): FastSlam.py:203
    plt.savefig('./Output/' + str(count).zfill(3) + '.png')
1 memory blocks (600 bytes): ScanMatcher_OGBased.py:42
    probSP = gaussian_filter(searchSpace, sigma=sigma)
2 memory blocks (592 bytes): artist.py:416
    self._callbacks.process("pchanged")
1 memory blocks (592 bytes): ticker.py:2122
    locs = self._raw_ticks(vmin, vmax)
2 memory blocks (584 bytes): TiffImagePlugin.py:746
    def load_signed_rational(self, data, legacy_api=True):
2 memory blocks (584 bytes): FastSlam.py:195
    plt.plot(particle.xTrajectory, particle.yTrajectory)
1 memory blocks (584 bytes): ScanMatcher_OGBased.py:70
    xRangeList, yRangeList, probSP = self.frameSearchSpace(matchedReading['x'], matchedReading['y'], fineSearchStep, fineSigma, fineMissMatchProbAtFine)
9 memory blocks (583 bytes): posixpath.py:145
    return p[i:]
36 memory blocks (576 bytes): __init__.py:2330
    self.tk.createcommand('exit', _exit)
36 memory blocks (576 bytes): __init__.py:2329
    self.tk.createcommand('tkerror', _tkerror)
9 memory blocks (576 bytes): FastSlam.py:83
    self.og = og
9 memory blocks (576 bytes): pydevd_file_utils.py:905
    ret = abs_path, canonical_normalized_filename, base
1 memory blocks (576 bytes): text.py:317
    w, h, d = renderer.get_text_width_height_descent(
1 memory blocks (576 bytes): markers.py:250
    self._filled = self._fillstyle != 'none'
1 memory blocks (576 bytes): backend_bases.py:746
    self._rgb = (0.0, 0.0, 0.0, 1.0)
1 memory blocks (576 bytes): axis.py:1880
    ticks_to_draw = axis._update_ticks()
1 memory blocks (576 bytes): _tkinter_finder.py:5
    import warnings
1 memory blocks (576 bytes): TiffImagePlugin.py:666
    _write_dispatch[idx] = func  # noqa: F821
1 memory blocks (576 bytes): PpmImagePlugin.py:23
    b_whitespace = b"\x20\x09\x0a\x0b\x0c\x0d"
1 memory blocks (576 bytes): PngImagePlugin.py:356
    self._seq_num = None
1 memory blocks (576 bytes): Image.py:2182
    self.encoderconfig = ()
1 memory blocks (576 bytes): fractions.py:8
    import numbers
2 memory blocks (568 bytes): JpegPresets.py:230
    [3,   3,  5,  9, 13, 15, 15, 15,
2 memory blocks (568 bytes): JpegPresets.py:222
    [2,   2,  2,  2,  3,  4,  5,  6,
2 memory blocks (568 bytes): JpegPresets.py:211
    [7,   7, 13, 24, 20, 20, 17, 17,
2 memory blocks (568 bytes): JpegPresets.py:203
    [6,   4,  4,  6,  9, 11, 12, 16,
2 memory blocks (568 bytes): JpegPresets.py:192
    [13, 11, 13, 16, 20, 20, 17, 17,
2 memory blocks (568 bytes): JpegPresets.py:184
    [12,  8,  8, 12, 17, 21, 24, 17,
2 memory blocks (568 bytes): JpegPresets.py:173
    [20, 19, 22, 27, 20, 20, 17, 17,
2 memory blocks (568 bytes): JpegPresets.py:165
    [18, 14, 14, 21, 30, 35, 34, 17,
2 memory blocks (568 bytes): JpegPresets.py:154
    [1,  1,  1,  2,  2,  3,  3,  3,
2 memory blocks (568 bytes): JpegPresets.py:146
    [1,  1,  1,  1,  1,  1,  1,  1,
2 memory blocks (568 bytes): JpegPresets.py:135
    [3,   3,  5,  9, 13, 15, 15, 15,
2 memory blocks (568 bytes): JpegPresets.py:127
    [2,   2,  2,  2,  3,  4,  5,  6,
2 memory blocks (568 bytes): JpegPresets.py:116
    [7,   7, 13, 24, 26, 31, 31, 31,
2 memory blocks (568 bytes): JpegPresets.py:108
    [6,   4,  4,  6,  9, 11, 12, 16,
2 memory blocks (568 bytes): JpegPresets.py:97
    [17, 15, 17, 21, 20, 26, 38, 48,
2 memory blocks (568 bytes): JpegPresets.py:89
    [16, 11, 11, 16, 23, 27, 31, 30,
2 memory blocks (568 bytes): JpegPresets.py:78
    [21, 25, 32, 38, 54, 68, 68, 68,
2 memory blocks (568 bytes): JpegPresets.py:70
    [20, 16, 25, 39, 50, 46, 62, 68,
1 memory blocks (568 bytes): text.py:733
    textrenderer.draw_text(gc, x, y, clean_line,
2 memory blocks (564 bytes): numeric.py:1393
    @array_function_dispatch(_moveaxis_dispatcher)
35 memory blocks (560 bytes): shape_base.py:648
    arr = asanyarray(v)
35 memory blocks (560 bytes): transforms.py:899
    self._points[:, 0] = points[:, 0]
10 memory blocks (560 bytes): __init__.py:153
    t not in [s, None]
10 memory blocks (560 bytes): OccupancyGrid.py:51
    radByR = []
10 memory blocks (560 bytes): OccupancyGrid.py:50
    radByY = []
10 memory blocks (560 bytes): OccupancyGrid.py:49
    radByX = []
10 memory blocks (560 bytes): FastSlam.py:86
    self.yTrajectory = []
10 memory blocks (560 bytes): FastSlam.py:85
    self.xTrajectory = []
10 memory blocks (560 bytes): pydevd_source_mapping.py:106
    key = ('has_entry', runtime_source_filename)
2 memory blocks (560 bytes): TiffImagePlugin.py:755
    def write_signed_rational(self, *values):
1 memory blocks (560 bytes): image.py:516
    out_alpha = _resample(self, mask, out_shape, t, resample=True)
1 memory blocks (560 bytes): colors.py:914
    self._lut[:-3, 2] = _create_lookup_table(
1 memory blocks (560 bytes): backend_bases.py:2319
    result = print_method(
3 memory blocks (552 bytes): pyplot.py:795
    _pylab_helpers.Gcf._set_new_active_manager(manager)
3 memory blocks (552 bytes): _base.py:768
    need_scale = {
2 memory blocks (552 bytes): pyplot.py:958
    res = fig.savefig(*args, **kwargs)
2 memory blocks (552 bytes): deprecation.py:412
    return func(*inner_args, **inner_kwargs)
1 memory blocks (552 bytes): _base.py:3046
    self._update_title_position(renderer)
1 memory blocks (552 bytes): ImageTk.py:115
    self.paste(image)
1 memory blocks (552 bytes): FastSlam.py:140
    estimatedReading, estMovingDist, estMovingTheta, rawMovingTheta = self.updateEstimatedPose(currentRawReading)
2 memory blocks (544 bytes): FastSlam.py:185
    if pf.weightUnbalanced():
1 memory blocks (544 bytes): backend_bases.py:1648
    return func(*args, **kwargs)
1 memory blocks (544 bytes): _base.py:4017
    self._process_unit_info([("y", (bottom, top))], convert=False)
1 memory blocks (544 bytes): sre_parse.py:755
    p = _parse_sub(source, state, verbose, nested + 1)
1 memory blocks (544 bytes): sre_parse.py:195
    i, j = av[-1].getwidth()
1 memory blocks (536 bytes): _filters.py:379
    gaussian_filter1d(input, sigma, axis, order, output,
1 memory blocks (536 bytes): image.py:646
    im, l, b, trans = self.make_image(
1 memory blocks (536 bytes): gridspec.py:611
    return gs[i-1:j]
3 memory blocks (532 bytes): image.py:193
    _image.resample(data, out, transform,
2 memory blocks (528 bytes): TiffImagePlugin.py:421
    class ImageFileDirectory_v2(MutableMapping):
1 memory blocks (528 bytes): _filters.py:277
    return correlate1d(input, weights, axis, output, mode, cval, 0)
1 memory blocks (528 bytes): arraysetops.py:317
    output = _unique1d(consolidated, return_index,
1 memory blocks (528 bytes): transforms.py:2261
    if self._x == self._y:
1 memory blocks (528 bytes): transforms.py:264
    return self.get_points()
1 memory blocks (528 bytes): transforms.py:178
    return self._invalidate_internal(value, invalidating_node=self)
1 memory blocks (528 bytes): ticker.py:710
    self._compute_offset()
1 memory blocks (528 bytes): text.py:684
    with self._cm_set(text=self._get_wrapped_text()):
1 memory blocks (528 bytes): pyplot.py:2640
    __ret = gca().imshow(
1 memory blocks (528 bytes): pyplot.py:959
    fig.canvas.draw_idle()   # need this if 'transparent=True' to reset colors
1 memory blocks (528 bytes): pyplot.py:914
    _pylab_helpers.Gcf.destroy(manager)
1 memory blocks (528 bytes): figure.py:2810
    mimage._draw_list_compositing_images(
1 memory blocks (528 bytes): colors.py:178
    from matplotlib import rcParams
1 memory blocks (528 bytes): backend_bases.py:2268
    with cbook._setattr_cm(self, manager=None), \
1 memory blocks (528 bytes): _axes.py:5494
    im.set_url(url)
1 memory blocks (528 bytes): artist.py:1055
    with cbook._setattr_cm(self, eventson=False):
1 memory blocks (528 bytes): ImageFile.py:112
    self._open()
1 memory blocks (528 bytes): Image.py:555
    self._close__fp()
1 memory blocks (528 bytes): contextlib.py:561
    if cb(*exc_details):
1 memory blocks (528 bytes): OccupancyGrid.py:124
    self.expandOccupancyGrid(expandDirection)
1 memory blocks (528 bytes): OccupancyGrid.py:94
    self.expandOccupancyGridHelper(0, 1)
1 memory blocks (528 bytes): OccupancyGrid.py:24
    xGrid, yGrid, bearingIdxGrid, rangeIdxGrid = self.spokesGrid()
1 memory blocks (520 bytes): text.py:296
    key = self._get_layout_cache_key(renderer=renderer)
1 memory blocks (520 bytes): spines.py:289
    self._adjust_location()
1 memory blocks (520 bytes): scale.py:596
    scale_cls = _api.check_getitem(_scale_mapping, scale=scale)
1 memory blocks (520 bytes): image.py:988
    self.axes.set_ylim((ymin, ymax), auto=None)
1 memory blocks (520 bytes): image.py:986
    self.axes.set_xlim((xmin, xmax), auto=None)
1 memory blocks (520 bytes): axis.py:2352
    bboxes, bboxes2 = self._get_tick_boxes_siblings(renderer=renderer)
1 memory blocks (520 bytes): _base.py:632
    self.cla()
1 memory blocks (520 bytes): OccupancyGrid.py:25
    radByX, radByY, radByR = self.itemizeSpokesGrid(xGrid, yGrid, bearingIdxGrid, rangeIdxGrid)
3 memory blocks (519 bytes): arraysetops.py:289
    dtype = [('f{i}'.format(i=i), ar.dtype) for i in range(ar.shape[1])]
2 memory blocks (515 bytes): contextlib.py:139
    def __exit__(self, typ, value, traceback):
8 memory blocks (512 bytes): _base.py:2265
    self._children.append(image)
3 memory blocks (512 bytes): fromnumeric.py:72
    passkwargs = {k: v for k, v in kwargs.items()
2 memory blocks (512 bytes): FastSlam.py:199
    xIdx, yIdx = bestParticle.og.convertRealXYToMapIdx(xRange, yRange)
1 memory blocks (512 bytes): <frozen importlib._bootstrap>:1027
1 memory blocks (512 bytes): _filters.py:276
    weights = _gaussian_kernel1d(sigma, order, lw)[::-1]
1 memory blocks (512 bytes): fromnumeric.py:2810
    return _wrapreduction(a, np.maximum, 'max', axis, None, out,
1 memory blocks (512 bytes): _methods.py:49
    return umr_sum(a, axis, dtype, out, keepdims, initial, where)
1 memory blocks (512 bytes): cycler.py:388
    for d in self:
1 memory blocks (512 bytes): image.py:572
    np.asarray(alpha_channel, np.float32) * out_alpha * alpha,
1 memory blocks (512 bytes): image.py:564
    output = self.to_rgba(output, bytes=True, norm=False)
1 memory blocks (512 bytes): font_manager.py:685
    self.set_size(size)
1 memory blocks (512 bytes): _base.py:2283
    self._update_line_limits(line)
1 memory blocks (512 bytes): _base.py:2261
    self._deprecate_noninstance('add_image', mimage.AxesImage, image=image)
1 memory blocks (512 bytes): _base.py:1283
    self._set_title_offset_trans(title_offset_points)
1 memory blocks (512 bytes): _axes.py:1632
    lines = [*self._get_lines(*args, data=data, **kwargs)]
1 memory blocks (512 bytes): PngImagePlugin.py:345
    super().__init__(fp)
1 memory blocks (512 bytes): Image.py:2980
    im = factory(fp, filename)
1 memory blocks (512 bytes): __init__.py:1675
    return self._configure('configure', cnf, kw)
1 memory blocks (512 bytes): __init__.py:1502
    cnf = _cnfmerge(cnf)
1 memory blocks (512 bytes): FastSlam.py:143
    self.prevMatchedMovingTheta = self.getMovingTheta(matchedReading)
1 memory blocks (512 bytes): FastSlam.py:39
    self.particles[i].update(reading, count)
2 memory blocks (509 bytes): __init__.py:2049
    yield
9 memory blocks (504 bytes): pydevd_file_utils.py:459
    NORM_PATHS_CONTAINER[filename] = abs_path, real_path
3 memory blocks (504 bytes): font_manager.py:813
    _api.check_in_list(['normal', 'italic', 'oblique'], style=style)
3 memory blocks (504 bytes): __init__.py:1742
    ret[canonical] = v
3 memory blocks (504 bytes): axis.py:857
    _api.check_in_list(['major', 'minor', 'both'], which=which)
3 memory blocks (504 bytes): axis.py:415
    super().__init__(*args, **kwargs)
2 memory blocks (504 bytes): transforms.py:671
    return Bbox([[x0, y0], [x1, y1]])
2 memory blocks (504 bytes): FastSlam.py:184
    pf.updateParticles(sensorData[key], count)
1 memory blocks (504 bytes): lines.py:732
    self.recache()
1 memory blocks (504 bytes): image.py:929
    super().__init__(
1 memory blocks (504 bytes): image.py:547
    output = self.norm(resampled_masked)
1 memory blocks (504 bytes): image.py:407
    a_max = A.max()
1 memory blocks (504 bytes): image.py:406
    a_min = A.min()
1 memory blocks (504 bytes): figure.py:2820
    self.canvas.draw_event(renderer)
1 memory blocks (504 bytes): cm.py:456
    rgba = self.cmap(x, alpha=alpha, bytes=bytes)
1 memory blocks (504 bytes): _base.py:3082
    mimage._draw_list_compositing_images(
1 memory blocks (504 bytes): artist.py:1163
    kwargs = cbook.normalize_kwargs(kwargs, self)
1 memory blocks (504 bytes): PngImagePlugin.py:703
    self.png.crc(cid, s)
1 memory blocks (504 bytes): ImageFile.py:500
    e = Image._getencoder(im.mode, e, a, im.encoderconfig)
1 memory blocks (504 bytes): ImageFile.py:222
    decoder = Image._getdecoder(
3 memory blocks (500 bytes): numeric.py:1380
    axis = tuple([normalize_axis_index(ax, ndim, argname) for ax in axis])
2 memory blocks (496 bytes): font_manager.py:711
    l = (tuple(self.get_family()),
1 memory blocks (496 bytes): core.py:3528
    self.__setmask__(value)
1 memory blocks (496 bytes): transforms.py:2228
    if self._x.is_affine and self._y.is_affine:
1 memory blocks (496 bytes): transforms.py:1462
    if sub_tree == self:
1 memory blocks (496 bytes): ticker.py:2107
    nticks = ((ticks <= _vmax) & (ticks >= _vmin)).sum()
1 memory blocks (496 bytes): ticker.py:2068
    scale, offset = scale_range(vmin, vmax, nbins)
1 memory blocks (496 bytes): spines.py:347
    base_transform = self.axes.get_xaxis_transform(which='grid')
1 memory blocks (496 bytes): spines.py:345
    base_transform = self.axes.get_yaxis_transform(which='grid')
1 memory blocks (496 bytes): spines.py:332
    self._ensure_position_is_set()
1 memory blocks (496 bytes): image.py:1645
    image = PIL.Image.frombuffer(
1 memory blocks (496 bytes): font_manager.py:1335
    score = (self.score_family(prop.get_family(), font.name) * 10
1 memory blocks (496 bytes): cm.py:286
    _api.check_in_list(sorted(_cmap_registry), name=name)
1 memory blocks (496 bytes): backend_agg.py:303
    fname = findfont(prop)
1 memory blocks (496 bytes): axis.py:2359
    spine.get_path()).get_extents()
1 memory blocks (496 bytes): axis.py:498
    return self.axes.get_yaxis_text1_transform(self._pad)
1 memory blocks (496 bytes): axis.py:437
    return self.axes.get_xaxis_text1_transform(self._pad)
1 memory blocks (496 bytes): artist.py:1069
    self.stale = True
1 memory blocks (496 bytes): artist.py:83
    self.axes.stale = val
1 memory blocks (496 bytes): _pylab_helpers.py:56
    if all(hasattr(num, attr) for attr in ["num", "destroy"]):
1 memory blocks (496 bytes): ImageFile.py:264
    self.load_end()
1 memory blocks (496 bytes): __init__.py:3177
    Widget.__init__(self, master, 'label', cnf, kw)
1 memory blocks (496 bytes): __init__.py:2304
    self.readprofile(baseName, className)
1 memory blocks (496 bytes): ScanMatcher_OGBased.py:93
    px, py = self.covertMeasureToXY(estimatedX, estimatedY, estimatedTheta, rMeasure)
2 memory blocks (490 bytes): __init__.py:1497
    def _options(self, cnf, kw = None):
1 memory blocks (488 bytes): <frozen importlib._bootstrap>:1006
1 memory blocks (488 bytes): core.py:6720
    elif m.any():
1 memory blocks (488 bytes): core.py:5934
    result = self.filled(fill_value).max(
1 memory blocks (488 bytes): core.py:217
    return f(dtype)
1 memory blocks (488 bytes): numeric.py:1450
    destination = normalize_axis_tuple(destination, a.ndim, 'destination')
1 memory blocks (488 bytes): transforms.py:968
    self.update_from_path(path, ignore=ignore,
1 memory blocks (488 bytes): ticker.py:712
    self._set_format()
1 memory blocks (488 bytes): gridspec.py:260
    num1, num2 = _normalize(key, nrows * ncols, None)
1 memory blocks (488 bytes): figure.py:2796
    artists = self._get_draw_artists(renderer)
1 memory blocks (488 bytes): figure.py:2279
    if not np.isfinite(figsize).all() or (np.array(figsize) < 0).any():
1 memory blocks (488 bytes): axis.py:1053
    minor_locs = self.get_minorticklocs()
1 memory blocks (488 bytes): artist.py:264
    return ax.yaxis.convert_units(y)
1 memory blocks (488 bytes): _pylab_helpers.py:66
    manager.canvas.mpl_disconnect(manager._cidgcf)
1 memory blocks (488 bytes): PngImagePlugin.py:929
    cid, pos, length = self.png.read()
1 memory blocks (488 bytes): ImageFile.py:510
    fp.write(d)
1 memory blocks (488 bytes): __init__.py:2819
    return self._create('image', args, kw)
1 memory blocks (488 bytes): __init__.py:850
    name = self._register(callit)
1 memory blocks (488 bytes): ScanMatcher_OGBased.py:145
    matchedPx, matchedPy = self.rotate((estimatedX, estimatedY), (px, py), dtheta)
1 memory blocks (488 bytes): pydevd.py:1217
    file_type = self.get_file_type(frame, abs_real_path_and_basename)
10 memory blocks (480 bytes): <frozen importlib._bootstrap_external>:1532
10 memory blocks (480 bytes): <frozen importlib._bootstrap_external>:758
10 memory blocks (480 bytes): FastSlam.py:82
    sm = ScanMatcher(og, scanMatchSearchRadius, scanMatchSearchHalfRad, scanSigmaInNumGrid, moveRSigma, maxMoveDeviation, turnSigma, missMatchProbAtCoarse, coarseFactor)
1 memory blocks (480 bytes): core.py:2360
    res = masked_where(~(np.isfinite(a)), a, copy=copy)
1 memory blocks (480 bytes): fromnumeric.py:2684
    return _methods._ptp(a, axis=axis, out=out, **kwargs)
1 memory blocks (480 bytes): fromnumeric.py:1973
    return _wrapfunc(a, 'nonzero')
1 memory blocks (480 bytes): units.py:206
    return self.get_converter(first)
1 memory blocks (480 bytes): transforms.py:204
    parent._invalidate_internal(
1 memory blocks (480 bytes): pyplot.py:2757
    return gca().plot(
1 memory blocks (480 bytes): markers.py:235
    self._set_marker(marker)
1 memory blocks (480 bytes): lines.py:751
    .get_transformed_path_and_affine())
1 memory blocks (480 bytes): image.py:192
    resample = image_obj.get_resample()
1 memory blocks (480 bytes): font_manager.py:683
    self.set_stretch(stretch)
1 memory blocks (480 bytes): figure.py:2465
    self.set_constrained_layout_pads()
1 memory blocks (480 bytes): figure.py:1515
    return self.add_subplot(1, 1, 1, **kwargs)
1 memory blocks (480 bytes): backend_agg.py:439
    super().draw()
1 memory blocks (480 bytes): _backend_tk.py:663
    NavigationToolbar2Tk._set_image_for_button(self, b)
1 memory blocks (480 bytes): backend_bases.py:2259
    canvas = self._get_output_canvas(backend, format)
1 memory blocks (480 bytes): backend_bases.py:1778
    event = DrawEvent(s, self, renderer)
1 memory blocks (480 bytes): backend_bases.py:1256
    super().__init__(name, canvas)
1 memory blocks (480 bytes): axis.py:936
    for child in self.majorTicks + self.minorTicks:
1 memory blocks (480 bytes): _base.py:3035
    artists = self.get_children()
1 memory blocks (480 bytes): _base.py:2539
    return [axis_map[axis_name].convert_units(data)
1 memory blocks (480 bytes): _base.py:1890
    pb1 = pb.shrunk_to_aspect(box_aspect, pb, fig_aspect)
1 memory blocks (480 bytes): _base.py:488
    y = _check_1d(xy[1])
1 memory blocks (480 bytes): _axes.py:5500
    self.add_image(im)
1 memory blocks (480 bytes): ImageFile.py:235
    s = read(self.decodermaxblock)
1 memory blocks (480 bytes): Image.py:2756
    im = new(mode, (1, 1))
1 memory blocks (480 bytes): Image.py:2184
    preinit()
1 memory blocks (480 bytes): __init__.py:1421
    return self._bind(('bind', self._w), sequence, func, add)
2 memory blocks (478 bytes): lines.py:1087
    def set_linestyle(self, ls):
9 memory blocks (477 bytes): core.py:5935
    axis=axis, out=out, **kwargs).view(type(self))
2 memory blocks (472 bytes): transforms.py:1784
    super().__init__(*args, **kwargs)
2 memory blocks (472 bytes): font_manager.py:1386
    return _cached_realpath(result)
2 memory blocks (472 bytes): TiffImagePlugin.py:1802
    Tags = {273, 288, 324, 519, 520, 521}
1 memory blocks (472 bytes): core.py:296
    return _recursive_fill_value(dtype, _scalar_fill_value)
1 memory blocks (472 bytes): ticker.py:2120
    vmin, vmax = mtransforms.nonsingular(
1 memory blocks (472 bytes): ticker.py:711
    self._set_order_of_magnitude()
1 memory blocks (472 bytes): text.py:233
    return get_rotation(self._rotation)  # string_or_number -> number
1 memory blocks (472 bytes): patches.py:540
    mhatch._validate_hatch_pattern(hatch)
1 memory blocks (472 bytes): image.py:1663
    pnginfo.add_text(k, v)
1 memory blocks (472 bytes): image.py:1628
    sm.set_clim(vmin, vmax)
1 memory blocks (472 bytes): figure.py:1578
    projection_class = projections.get_projection_class(projection)
1 memory blocks (472 bytes): backend_agg.py:230
    flags = get_hinting_flag()
1 memory blocks (472 bytes): _backend_tk.py:479
    self.canvas._tkcanvas.after_cancel(self.canvas._idle_draw_id)
1 memory blocks (472 bytes): axis.py:1336
    return mtext.FontProperties(size=size).get_size_in_points()
1 memory blocks (472 bytes): _base.py:3426
    self.yaxis.set_tick_params(**ykw)
1 memory blocks (472 bytes): _base.py:2478
    self.dataLim.update_from_data_xy(xys, self.ignore_existing_data_limits,
1 memory blocks (472 bytes): _base.py:349
    default_dict = self._getdefaults(set(), kw)
1 memory blocks (472 bytes): _axes.py:5492
    im.set_clip_path(self.patch)
1 memory blocks (472 bytes): _axes.py:5481
    self.set_aspect(aspect)
1 memory blocks (472 bytes): PngImagePlugin.py:684
    self.png = PngStream(self.fp)
1 memory blocks (472 bytes): __init__.py:1686
    self.configure({key: value})
3 memory blocks (469 bytes): _base.py:769
    name: any(ax._stale_viewlims[name]
9 memory blocks (468 bytes): <frozen importlib._bootstrap>:408
2 memory blocks (464 bytes): artist.py:149
    def __init__(self):
2 memory blocks (464 bytes): TiffImagePlugin.py:418
    __round__ = _delegate("__round__")
1 memory blocks (464 bytes): core.py:1928
    cond = make_mask(condition, shrink=False)
1 memory blocks (464 bytes): linalg.py:557
    t, result_t = _commonType(a)
1 memory blocks (464 bytes): units.py:189
    x = np.ma.getdata(x).ravel()
1 memory blocks (464 bytes): transforms.py:2752
    self.set_children(transform)
1 memory blocks (464 bytes): transforms.py:2020
    return self.rotate(math.radians(degrees))
1 memory blocks (464 bytes): transforms.py:1628
    x = self.transform_non_affine(path.vertices)
1 memory blocks (464 bytes): ticker.py:2114
    return self.tick_values(vmin, vmax)
1 memory blocks (464 bytes): pyplot.py:306
    return _backend_mod.new_figure_manager(*args, **kwargs)
1 memory blocks (464 bytes): patches.py:752
    bbox = self.get_bbox()
1 memory blocks (464 bytes): lines.py:1171
    self._set_markercolor("markeredgecolor", True, ec)
1 memory blocks (464 bytes): image.py:702
    self._A = cbook.safe_masked_invalid(A, copy=True)
1 memory blocks (464 bytes): gridspec.py:176
    subplot_params = self.get_subplot_params(fig)
1 memory blocks (464 bytes): cm.py:453
    x = ma.asarray(x)
1 memory blocks (464 bytes): backend_agg.py:540
    FigureCanvasAgg.draw(self)
1 memory blocks (464 bytes): axis.py:2524
    ends = mtransforms.Bbox.from_bounds(0, 0, 1, 1)
1 memory blocks (464 bytes): axis.py:2280
    super().__init__(*args, **kwargs)
1 memory blocks (464 bytes): _base.py:1888
    box_aspect = aspect * self.get_data_ratio()
1 memory blocks (464 bytes): _base.py:1235
    self._update_transScale()  # needed?
1 memory blocks (464 bytes): _base.py:781
    self._unstale_viewLim()
1 memory blocks (464 bytes): _axes.py:5498
    im.set_extent(im.get_extent())
1 memory blocks (464 bytes): _axes.py:1635
    self._request_autoscale_view(scalex=scalex, scaley=scaley)
1 memory blocks (464 bytes): weakref.py:61
    callback(self)
1 memory blocks (464 bytes): __init__.py:564
    Variable.__init__(self, master, value, name)
1 memory blocks (464 bytes): ScanMatcher_OGBased.py:118
    rotatedPxIdx, rotatedPyIdx = self.convertXYToSearchSpaceIdx(rotatedPx, rotatedPy, xRangeList[0],
1 memory blocks (464 bytes): ScanMatcher_OGBased.py:97
    xv, yv = np.meshgrid(xMovingRange, yMovingRange)
7 memory blocks (461 bytes): <frozen importlib._bootstrap>:1076
3 memory blocks (456 bytes): _pylab_helpers.py:126
    cls.figs[manager.num] = manager
1 memory blocks (456 bytes): _filters.py:369
    axes = _ni_support._check_axes(axes, input.ndim)
1 memory blocks (456 bytes): core.py:398
    return _extremum_fill_value(obj, max_filler, "maximum")
1 memory blocks (456 bytes): arraysetops.py:319
    output = (reshape_uniq(output[0]),) + output[1:]
1 memory blocks (456 bytes): numerictypes.py:418
    if not issubclass_(arg2, generic):
1 memory blocks (456 bytes): transforms.py:2605
    outl, outb, outw, outh = self._boxout.bounds
1 memory blocks (456 bytes): ticker.py:1928
    if self.closeto(m / self.step, 0):
1 memory blocks (456 bytes): ticker.py:587
    return self._format_maybe_minus_and_locale(self.format, xp)
1 memory blocks (456 bytes): text.py:710
    angle = self.get_rotation()
1 memory blocks (456 bytes): text.py:677
    if not self.get_visible():
1 memory blocks (456 bytes): text.py:368
    offset_layout = [(x + width - w, y)
1 memory blocks (456 bytes): text.py:365
    offset_layout = [(x + width / 2 - w / 2, y)
1 memory blocks (456 bytes): text.py:143
    self.set_color(
1 memory blocks (456 bytes): patches.py:611
    affine = transform.get_affine()
1 memory blocks (456 bytes): image.py:982
    self.axes.update_datalim(corners)
1 memory blocks (456 bytes): image.py:348
    clipped_bbox = Bbox.intersection(out_bbox, clip_bbox)
1 memory blocks (456 bytes): gridspec.py:597
    gs = GridSpec._check_gridspec_exists(figure, rows, cols)
1 memory blocks (456 bytes): font_manager.py:682
    self.set_weight(weight)
1 memory blocks (456 bytes): figure.py:1517
    return self._axstack()
1 memory blocks (456 bytes): figure.py:1483
    self._axstack.bubble(a)
1 memory blocks (456 bytes): figure.py:779
    self._localaxes.add(ax)
1 memory blocks (456 bytes): figure.py:774
    return self._add_axes_internal(ax, key)
1 memory blocks (456 bytes): figure.py:94
    if a in self:
1 memory blocks (456 bytes): colors.py:1136
    self._vmax = _sanitize_extrema(vmax)
1 memory blocks (456 bytes): __init__.py:648
    self.push(o)
1 memory blocks (456 bytes): backend_agg.py:436
    self.figure.draw(self.renderer)
1 memory blocks (456 bytes): backend_agg.py:431
    self.renderer = self.get_renderer(cleared=True)
1 memory blocks (456 bytes): _backend_tk.py:740
    widget.bind('<Leave>', leave)
1 memory blocks (456 bytes): _backend_tk.py:639
    size = button.winfo_pixels('18p')
1 memory blocks (456 bytes): _backend_tk.py:425
    window_dpi = tk.IntVar(master=window, value=96,
1 memory blocks (456 bytes): _backend_tk.py:414
    self.canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1)
1 memory blocks (456 bytes): axis.py:2529
    size = self._get_tick_label_size('y') * 2
1 memory blocks (456 bytes): axis.py:858
    kwtrans = self._translate_tick_kw(kw)
1 memory blocks (456 bytes): axis.py:822
    self.set_units(None)
1 memory blocks (456 bytes): _base.py:2953
    return dict(zip(self._axis_names, self._get_axis_list()))
1 memory blocks (456 bytes): _base.py:1651
    self.set_adjustable(adjustable, share=share)  # Handle sharing.
1 memory blocks (456 bytes): _base.py:1301
    self.yaxis.set_clip_path(self.patch)
1 memory blocks (456 bytes): _base.py:629
    self.set_axisbelow(mpl.rcParams['axes.axisbelow'])
1 memory blocks (456 bytes): _base.py:226
    self.set_prop_cycle(None)
1 memory blocks (456 bytes): PngImagePlugin.py:694
    s = self.png.call(cid, pos, length)
1 memory blocks (456 bytes): PngImagePlugin.py:411
    s = ImageFile._safe_read(self.fp, length)
1 memory blocks (456 bytes): font.py:78
    font = self._set(options)
1 memory blocks (456 bytes): __init__.py:873
    self.deletecommand(script)
1 memory blocks (456 bytes): ScanMatcher_OGBased.py:38
    probSP = self.generateProbSearchSpace(searchSpace, sigma)
1 memory blocks (448 bytes): _filters.py:122
    output = _ni_support._get_output(output, input)
1 memory blocks (448 bytes): units.py:199
    first = cbook.safe_first_element(x)
1 memory blocks (448 bytes): transforms.py:1798
    return self.transform_affine(values)
1 memory blocks (448 bytes): transforms.py:1129
    points = self._transform.transform(
1 memory blocks (448 bytes): ticker.py:2131
    return self.raise_if_exceeds(locs)
1 memory blocks (448 bytes): text.py:139
    super().__init__()
1 memory blocks (448 bytes): spines.py:322
    self.axis.reset_ticks()
1 memory blocks (448 bytes): patches.py:844
    x0, y0, x1, y1 = self._convert_units()
1 memory blocks (448 bytes): lines.py:1132
    self._dashOffset, self._dashSeq = _scale_dashes(
1 memory blocks (448 bytes): lines.py:1130
    self._us_dashOffset, self._us_dashSeq = _get_dash_pattern(ls)
1 memory blocks (448 bytes): lines.py:710
    self._transform_path()
1 memory blocks (448 bytes): image.py:953
    transformed_bbox = TransformedBbox(bbox, trans)
1 memory blocks (448 bytes): image.py:951
    x1, x2, y1, y2 = self.get_extent()
1 memory blocks (448 bytes): font_manager.py:1338
    + self.score_weight(prop.get_weight(), font.weight)
1 memory blocks (448 bytes): __init__.py:874
    self.clean()
1 memory blocks (448 bytes): backend_agg.py:231
    font = self._get_agg_font(prop)
1 memory blocks (448 bytes): backend_bases.py:2314
    stack.enter_context(self.figure._cm_set(constrained_layout=False))
1 memory blocks (448 bytes): axis.py:2363
    bbox = mtransforms.Bbox.union(bboxes + [spinebbox])
1 memory blocks (448 bytes): axis.py:2357
    spine = self.axes.spines['left']
1 memory blocks (448 bytes): axis.py:501
    return self.axes.get_yaxis_text2_transform(self._pad)
1 memory blocks (448 bytes): axis.py:440
    return self.axes.get_xaxis_text2_transform(self._pad)
1 memory blocks (448 bytes): _base.py:4053
    bottom, top = self.yaxis.limit_range_for_scale(bottom, top)
1 memory blocks (448 bytes): _base.py:2521
    axis.update_units(data)
1 memory blocks (448 bytes): _base.py:1295
    self.patch.set_linewidth(0)
1 memory blocks (448 bytes): _base.py:770
    for ax in self._shared_axes[name].get_siblings(self))
1 memory blocks (448 bytes): _base.py:669
    self.tick_params(
1 memory blocks (448 bytes): _base.py:651
    'units', self._unit_change_handler(name)))
1 memory blocks (448 bytes): _base.py:350
    self._setdefaults(default_dict, kw)
1 memory blocks (448 bytes): PngImagePlugin.py:1359
    chunk(fp, b"IEND", b"")
1 memory blocks (448 bytes): PngImagePlugin.py:336
    self.add(b"tEXt", key + b"\0" + value)
1 memory blocks (448 bytes): ImageFile.py:485
    im.load()
1 memory blocks (448 bytes): Image.py:2981
    _decompression_bomb_check(im.size)
1 memory blocks (448 bytes): __init__.py:2595
    BaseWidget._setup(self, master, cnf)
2 memory blocks (444 bytes): colors.py:152
    def to_rgba(c, alpha=None):
2 memory blocks (443 bytes): font_manager.py:1130
    def score_family(self, families, family2):
1 memory blocks (440 bytes): <frozen importlib._bootstrap>:688
1 memory blocks (440 bytes): _filters.py:374
    radiuses = _ni_support._normalize_sequence(radius, num_axes)
1 memory blocks (440 bytes): core.py:5929
    newmask = _check_mask_axis(_mask, axis, **kwargs)
1 memory blocks (440 bytes): linalg.py:556
    _assert_stacked_square(a)
1 memory blocks (440 bytes): transforms.py:1629
    return Path._fast_from_codes_and_verts(x, path.codes, path)
1 memory blocks (440 bytes): transforms.py:820
    return Bbox.from_extents(x0, y0, x0 + width, y0 + height)
1 memory blocks (440 bytes): ticker.py:2751
    super().__init__(nbins=nbins, steps=steps)
1 memory blocks (440 bytes): ticker.py:2104
    high = edge.ge(_vmax - best_vmin)
1 memory blocks (440 bytes): ticker.py:2103
    low = edge.le(_vmin - best_vmin)
1 memory blocks (440 bytes): text.py:947
    mpl.colors._check_color_like(color=color)
1 memory blocks (440 bytes): text.py:444
    self._cached[key] = ret
1 memory blocks (440 bytes): patches.py:737
    return Path.unit_rectangle()
1 memory blocks (440 bytes): patches.py:610
    tpath = transform.transform_path_non_affine(path)
1 memory blocks (440 bytes): patches.py:568
    gc.set_dashes(self._dashoffset, self._dashes)
1 memory blocks (440 bytes): patches.py:296
    return transforms.IdentityTransform()
1 memory blocks (440 bytes): patches.py:105
    self.set_linestyle(linestyle)
1 memory blocks (440 bytes): image.py:283
    martist.Artist._set_alpha_for_array(self, alpha)
1 memory blocks (440 bytes): gridspec.py:385
    super().__init__(nrows, ncols,
1 memory blocks (440 bytes): figure.py:2313
    self.clf()
1 memory blocks (440 bytes): figure.py:780
    self.sca(ax)
1 memory blocks (440 bytes): __init__.py:707
    xm = np.ma.masked_invalid(x, copy=False)
1 memory blocks (440 bytes): backend_agg.py:304
    font = get_font(fname)
1 memory blocks (440 bytes): _backend_tk.py:936
    window.iconphoto(False, icon_img)
1 memory blocks (440 bytes): _backend_tk.py:923
    cbook._setup_new_guiapp()
1 memory blocks (440 bytes): _backend_tk.py:534
    self._Spacer()
1 memory blocks (440 bytes): _backend_tk.py:501
    self.window.wm_title(title)
1 memory blocks (440 bytes): _backend_tk.py:202
    root = self._tkcanvas.winfo_toplevel()
1 memory blocks (440 bytes): _backend_tk.py:177
    self._tkcanvas.create_image(w//2, h//2, image=self._tkphoto)
1 memory blocks (440 bytes): _backend_tk.py:171
    w, h = self.get_width_height(physical=True)
1 memory blocks (440 bytes): backend_bases.py:2134
    return tuple(int(size / (1 if physical else self.device_pixel_ratio))
1 memory blocks (440 bytes): axis.py:1881
    tlb, tlb2 = axis._get_tick_bboxes(ticks_to_draw, renderer)
1 memory blocks (440 bytes): axis.py:1868
    axis_names = [
1 memory blocks (440 bytes): axis.py:1087
    [tick.label2.get_window_extent(renderer)
1 memory blocks (440 bytes): axis.py:1078
    if mtransforms._interval_contains_close(interval_t, loc_t):
1 memory blocks (440 bytes): axis.py:937
    child.set_clip_path(clippath, transform)
1 memory blocks (440 bytes): axis.py:761
    self._scale = mscale.scale_factory(value, self, **kwargs)
1 memory blocks (440 bytes): axis.py:392
    grid_kw = {k[5:]: v for k, v in kw.items()
1 memory blocks (440 bytes): axis.py:387
    label_kw = {k[5:]: v for k, v in kw.items()
1 memory blocks (440 bytes): axis.py:148
    grid_kw = {k[5:]: v for k, v in kw.items()}
1 memory blocks (440 bytes): axis.py:131
    self._set_labelrotation(labelrotation)
1 memory blocks (440 bytes): _base.py:4030
    if self.get_yscale() == 'log' and (bottom <= 0 or top <= 0):
1 memory blocks (440 bytes): _base.py:616
    self.set_box_aspect(box_aspect)
1 memory blocks (440 bytes): _base.py:328
    if any(kw.get(k, None) is None for k in prop_keys):
1 memory blocks (440 bytes): _axes.py:5493
    im._scale_norm(norm, vmin, vmax)
1 memory blocks (440 bytes): _axes.py:5488
    im.set_data(X)
1 memory blocks (440 bytes): __init__.py:181
    __version__ = property(lambda self: _get_version())
1 memory blocks (440 bytes): TiffImagePlugin.py:745
    @_register_loader(10, 8)
1 memory blocks (440 bytes): PngImagePlugin.py:162
    length = i32(s)
1 memory blocks (440 bytes): __init__.py:2598
    classes = [(k, v) for k, v in cnf.items() if isinstance(k, type)]
1 memory blocks (440 bytes): OccupancyGrid.py:147
    self.checkAndExapndOG(x + xAtSpokeDir[occupiedIdx], y + yAtSpokeDir[occupiedIdx])
7 memory blocks (439 bytes): TiffImagePlugin.py:918
    setattr(ImageFileDirectory_v2, "write_" + name, _write_dispatch[idx])
2 memory blocks (434 bytes): __init__.py:132
    def check_shape(_shape, **kwargs):
3 memory blocks (432 bytes): FastSlam.py:30
    self.particlesTrajectory = []
2 memory blocks (432 bytes): transforms.py:767
    def __init__(self, points, **kwargs):
1 memory blocks (432 bytes): <frozen importlib._bootstrap_external>:1184
1 memory blocks (432 bytes): core.py:2364
    res._mask = make_mask_none(res.shape, res.dtype)
1 memory blocks (432 bytes): linalg.py:554
    a, wrap = _makearray(a)
1 memory blocks (432 bytes): numeric.py:1455
    order = [n for n in range(a.ndim) if n not in source]
1 memory blocks (432 bytes): numeric.py:265
    res = empty_like(a, dtype=dtype, order=order, subok=subok, shape=shape)
1 memory blocks (432 bytes): transforms.py:2762
    self._transform.transform_path_non_affine(self._path)
1 memory blocks (432 bytes): transforms.py:1470
    return self + other.inverted()
1 memory blocks (432 bytes): transforms.py:1424
    return [self.contains_branch(other_transform)] * 2
1 memory blocks (432 bytes): transforms.py:1403
    for _, sub_tree in self._iter_break_from_left_to_right():
1 memory blocks (432 bytes): text.py:1246
    elif cbook.is_math_text(s):
1 memory blocks (432 bytes): text.py:913
    bbox = bbox.translated(x, y)
1 memory blocks (432 bytes): text.py:911
    x, y = self.get_unitless_position()
1 memory blocks (432 bytes): text.py:899
    tx, ty = self._get_xy_display()
1 memory blocks (432 bytes): text.py:706
    gc.set_alpha(self.get_alpha())
1 memory blocks (432 bytes): text.py:527
    self._update_clip_properties()
1 memory blocks (432 bytes): text.py:358
    M = Affine2D().rotate_deg(self.get_rotation())
1 memory blocks (432 bytes): pyplot.py:775
    manager = _pylab_helpers.Gcf.get_fig_manager(num)
1 memory blocks (432 bytes): patches.py:373
    self._set_facecolor(color)
1 memory blocks (432 bytes): patches.py:355
    self._set_edgecolor(color)
1 memory blocks (432 bytes): lines.py:841
    marker_trans = marker_trans.scale(w)
1 memory blocks (432 bytes): lines.py:791
    self._get_markerfacecolor(alt=True), self._alpha)
1 memory blocks (432 bytes): lines.py:763
    if self.is_dashed():
1 memory blocks (432 bytes): lines.py:388
    self.set_markeredgecolor(markeredgecolor)  # Normalizes None to rc.
1 memory blocks (432 bytes): lines.py:387
    self.set_markerfacecoloralt(markerfacecoloralt)
1 memory blocks (432 bytes): lines.py:386
    self.set_markerfacecolor(markerfacecolor)  # Normalizes None to rc.
1 memory blocks (432 bytes): image.py:377
    .translate(-clipped_bbox.x0, -clipped_bbox.y0)
1 memory blocks (432 bytes): image.py:198
    image_obj.get_filterrad())
1 memory blocks (432 bytes): image.py:197
    image_obj.get_filternorm(),
1 memory blocks (432 bytes): image.py:173
    interpolation = image_obj.get_interpolation()
1 memory blocks (432 bytes): gridspec.py:198
    cell_widths = [r * norm for r in self._col_width_ratios]
1 memory blocks (432 bytes): gridspec.py:190
    cell_heights = [r * norm for r in self._row_height_ratios]
1 memory blocks (432 bytes): font_manager.py:669
    self.set_math_fontfamily(math_fontfamily)
1 memory blocks (432 bytes): figure.py:2238
    super().__init__(**kwargs)
1 memory blocks (432 bytes): figure.py:69
    return [a for i, a in sorted(self._elements)]
1 memory blocks (432 bytes): colors.py:1234
    clip = self.clip
1 memory blocks (432 bytes): cm.py:589
    self.norm = norm
1 memory blocks (432 bytes): _backend_tk.py:724
    self._buttons['Forward']['state'] = state_map[can_forward]
1 memory blocks (432 bytes): backend_bases.py:3302
    self.set_history_buttons()
1 memory blocks (432 bytes): backend_bases.py:884
    self.set_foreground(self._rgb, isRGBA=True)
1 memory blocks (432 bytes): axis.py:2358
    spinebbox = spine.get_transform().transform_path(
1 memory blocks (432 bytes): axis.py:2232
    self._get_ticks_position()]
1 memory blocks (432 bytes): axis.py:1605
    self._set_formatter(formatter, self.minor)
1 memory blocks (432 bytes): axis.py:1426
    gridkw = {'grid_' + item[0]: item[1] for item in kwargs.items()}
1 memory blocks (432 bytes): axis.py:1282
    major_locs = self.major.locator()
1 memory blocks (432 bytes): axis.py:1063
    view_low, view_high = self.get_view_interval()
1 memory blocks (432 bytes): axis.py:1055
    minor_ticks = self.get_minor_ticks(len(minor_locs))
1 memory blocks (432 bytes): axis.py:1047
    major_ticks = self.get_major_ticks(len(major_locs))
1 memory blocks (432 bytes): axis.py:374
    tick_kw = {k: v for k, v in kw.items() if k in ['color', 'zorder']}
1 memory blocks (432 bytes): _base.py:4019
    top = self._validate_converted_limits(top, self.convert_yunits)
1 memory blocks (432 bytes): _base.py:1503
    _title.set_clip_box(None)
1 memory blocks (432 bytes): _base.py:1215
    self.yaxis._set_scale('linear')
1 memory blocks (432 bytes): _base.py:1066
    ax._position.set(pos)
1 memory blocks (432 bytes): _base.py:763
    self._set_lim_and_transforms()
1 memory blocks (432 bytes): _base.py:615
    self.set_figure(fig)
1 memory blocks (432 bytes): _base.py:254
    args = [cbook.sanitize_sequence(a) for a in args]
1 memory blocks (432 bytes): _axes.py:1634
    self.add_line(line)
1 memory blocks (432 bytes): _pylab_helpers.py:114
    manager._cidgcf = manager.canvas.mpl_connect(
1 memory blocks (432 bytes): ImageFile.py:210
    prefix = self.tile_prefix
1 memory blocks (432 bytes): __init__.py:2301
    self._loadtk()
1 memory blocks (432 bytes): __init__.py:1261
    return self._nametowidget(self.tk.call(
1 memory blocks (432 bytes): OccupancyGrid.py:122
    expandDirection = self.checkMapToExpand(x, y)
1 memory blocks (432 bytes): FastSlam.py:144
    self.updateTrajectory(matchedReading)
1 memory blocks (432 bytes): FastSlam.py:43
    self.normalizeWeights()
2 memory blocks (431 bytes): font_manager.py:862
    def set_size(self, size):
2 memory blocks (425 bytes): text.py:275
    def _get_layout_cache_key(self, renderer=None):
2 memory blocks (424 bytes): path.py:191
    def _update_values(self):
1 memory blocks (424 bytes): core.py:5931
    fill_value = maximum_fill_value(self)
1 memory blocks (424 bytes): linalg.py:555
    _assert_stacked_2d(a)
1 memory blocks (424 bytes): linalg.py:168
    rt = _realType(type_, default=None)
1 memory blocks (424 bytes): function_base.py:5163
    output = [x.copy() for x in output]
1 memory blocks (424 bytes): getlimits.py:627
    return self.smallest_normal
1 memory blocks (424 bytes): transforms.py:2786
    self._revalidate()
1 memory blocks (424 bytes): transforms.py:2077
    self.invalidate()
1 memory blocks (424 bytes): transforms.py:1727
    return self._child.__eq__(other)
1 memory blocks (424 bytes): transforms.py:1618
    return self.get_affine().transform_path_affine(path)
1 memory blocks (424 bytes): transforms.py:1608
    return self.transform_path_affine(self.transform_path_non_affine(path))
1 memory blocks (424 bytes): transforms.py:1134
    points = np.ma.filled(points, 0.0)
1 memory blocks (424 bytes): ticker.py:2043
    self._steps = self._validate_steps(steps)
1 memory blocks (424 bytes): text.py:1262
    self._fontproperties = FontProperties._from_any(fp).copy()
1 memory blocks (424 bytes): text.py:719
    clean_line, ismath = self._preprocess_math(line)
1 memory blocks (424 bytes): text.py:526
    super().set_clip_box(clipbox)
1 memory blocks (424 bytes): text.py:267
    self._fontproperties = other._fontproperties.copy()
1 memory blocks (424 bytes): text.py:159
    self.set_rotation_mode(rotation_mode)
1 memory blocks (424 bytes): spines.py:204
    self.set_position(self._position)
1 memory blocks (424 bytes): spines.py:139
    return super().get_patch_transform()
1 memory blocks (424 bytes): pyplot.py:2648
    sci(__ret)
1 memory blocks (424 bytes): pyplot.py:2262
    return gcf().gca(**kwargs)
1 memory blocks (424 bytes): pyplot.py:801
    draw_if_interactive()
1 memory blocks (424 bytes): pyplot.py:787
    manager = new_figure_manager(
1 memory blocks (424 bytes): patches.py:577
    gc.set_alpha(self._alpha)
1 memory blocks (424 bytes): markers.py:234
    self._set_fillstyle(fillstyle)
1 memory blocks (424 bytes): lines.py:1269
    super().update_from(other)
1 memory blocks (424 bytes): lines.py:787
    self.get_markeredgecolor(), self._alpha)
1 memory blocks (424 bytes): lines.py:367
    self.set_drawstyle(drawstyle)
1 memory blocks (424 bytes): lines.py:366
    self.set_linestyle(linestyle)
1 memory blocks (424 bytes): lines.py:365
    self.set_linewidth(linewidth)
1 memory blocks (424 bytes): image.py:1627
    sm = cm.ScalarMappable(cmap=cmap)
1 memory blocks (424 bytes): image.py:254
    self.set_interpolation_stage(interpolation_stage)
1 memory blocks (424 bytes): image.py:253
    self.set_interpolation(interpolation)
1 memory blocks (424 bytes): image.py:124
    has_images = any(isinstance(x, _ImageBase) for x in artists)
1 memory blocks (424 bytes): font_manager.py:681
    self.set_variant(variant)
1 memory blocks (424 bytes): font_manager.py:680
    self.set_style(style)
1 memory blocks (424 bytes): cm.py:546
    cmap = get_cmap(cmap)
1 memory blocks (424 bytes): cm.py:387
    self.autoscale_None()
1 memory blocks (424 bytes): __init__.py:826
    to_drop = [key for key in mapping if key() is None]
1 memory blocks (424 bytes): _backend_tk.py:560
    NavigationToolbar2.__init__(self, canvas)
1 memory blocks (424 bytes): _backend_tk.py:424
    window_frame = int(window.wm_frame(), 16)
1 memory blocks (424 bytes): _backend_tk.py:168
    super().__init__(figure)
1 memory blocks (424 bytes): axis.py:2391
    self.offsetText.set_position(
1 memory blocks (424 bytes): axis.py:2390
    top = self.axes.bbox.ymax
1 memory blocks (424 bytes): axis.py:1869
    name for name, axis in self.axes._get_axis_map().items()
1 memory blocks (424 bytes): axis.py:1497
    if munits._is_natively_supported(x):
1 memory blocks (424 bytes): axis.py:1377
    self._copy_tick_props(self.majorTicks[0], tick)
1 memory blocks (424 bytes): axis.py:1346
    dest.gridline.update_from(src.gridline)
1 memory blocks (424 bytes): axis.py:1343
    dest.label2.update_from(src.label2)
1 memory blocks (424 bytes): axis.py:1054
    minor_labels = self.minor.formatter.format_ticks(minor_locs)
1 memory blocks (424 bytes): axis.py:1052
    tick.set_label2(label)
1 memory blocks (424 bytes): axis.py:1051
    tick.set_label1(label)
1 memory blocks (424 bytes): axis.py:512
    self.tick2line.set_marker(mark2)
1 memory blocks (424 bytes): axis.py:505
    super()._apply_tickdir(tickdir)
1 memory blocks (424 bytes): axis.py:430
    trans, va, ha = self._get_text2_transform()
1 memory blocks (424 bytes): axis.py:357
    if any(k in kw for k in ['size', 'width', 'pad', 'tickdir']):
1 memory blocks (424 bytes): _base.py:4057
    self._viewLim.intervaly = (bottom, top)
1 memory blocks (424 bytes): _base.py:3726
    self._viewLim.intervalx = (left, right)
1 memory blocks (424 bytes): _base.py:3052
    if not self.figure.canvas.is_saving():
1 memory blocks (424 bytes): _base.py:3006
    ymax = max(title.get_position()[1] for title in titles)
1 memory blocks (424 bytes): _base.py:2984
    if (ax.xaxis.get_ticks_position() in ['top', 'unknown']
1 memory blocks (424 bytes): _base.py:1291
    self.patch = self._gen_axes_patch()
1 memory blocks (424 bytes): _base.py:1107
    self._mouseover_set.add(a)
1 memory blocks (424 bytes): _base.py:788
    want_scale = {name: True for name in self._axis_names}
1 memory blocks (424 bytes): _base.py:638
    self.set_navigate(True)
1 memory blocks (424 bytes): _base.py:538
    return [l[0] for l in result]
1 memory blocks (424 bytes): _axes.py:5489
    im.set_alpha(alpha)
1 memory blocks (424 bytes): artist.py:891
    gc.set_clip_path(self._clippath)
1 memory blocks (424 bytes): TiffImagePlugin.py:754
    @_register_writer(10)
1 memory blocks (424 bytes): PngImagePlugin.py:1032
    crc = _crc32(data, _crc32(cid))
1 memory blocks (424 bytes): Image.py:2757
    im = im._new(core.map_buffer(data, size, decoder_name, 0, args))
1 memory blocks (424 bytes): Image.py:2165
    elif isPath(fp):
1 memory blocks (424 bytes): __init__.py:380
    self.initialize(value)
1 memory blocks (424 bytes): OccupancyGrid.py:42
    bearingIdxGrid[:, 0: numHalfElem] = np.fliplr(np.flipud(bearingIdxGrid))[:, 0: numHalfElem] + int(self.numSpokes / 2)
2 memory blocks (422 bytes): __init__.py:1542
    def _register(self, func, subst=None, needcleanup=1):
2 memory blocks (420 bytes): __init__.py:1724
    def isEnabledFor(self, level):
2 memory blocks (418 bytes): transforms.py:1862
    def transform_affine(self, points):
2 memory blocks (417 bytes): numeric.py:1330
    def normalize_axis_tuple(axis, ndim, argname=None, allow_duplicate=False):
1 memory blocks (416 bytes): <frozen importlib._bootstrap>:674
1 memory blocks (416 bytes): _filters.py:129
    if _invalid_origin(origin, len(weights)):
1 memory blocks (416 bytes): core.py:5825
    fill_value = minimum_fill_value(self)
1 memory blocks (416 bytes): core.py:3266
    scalar_expected = _scalar_heuristic(self.data, dout)
1 memory blocks (416 bytes): core.py:1942
    result.mask = _shrink_mask(cond)
1 memory blocks (416 bytes): linalg.py:560
    extobj = get_linalg_error_extobj(_raise_linalgerror_singular)
1 memory blocks (416 bytes): stride_tricks.py:355
    result = _maybe_view_as_subclass(array, broadcast)
1 memory blocks (416 bytes): stride_tricks.py:345
    if any(size < 0 for size in shape):
1 memory blocks (416 bytes): _dtype.py:362
    if _name_includes_bit_suffix(dtype):
1 memory blocks (416 bytes): transforms.py:2419
    return self.get_affine().transform(points)
1 memory blocks (416 bytes): transforms.py:2397
    return self is other or (self._a == other._a
1 memory blocks (416 bytes): transforms.py:2297
    is_separable = x_transform.is_separable and y_transform.is_separable
1 memory blocks (416 bytes): transforms.py:1716
    self._init(child)
1 memory blocks (416 bytes): transforms.py:1355
    return (composite_transform_factory(self, other)
1 memory blocks (416 bytes): transforms.py:670
    y1 = np.max([bbox.ymax for bbox in bboxes])
1 memory blocks (416 bytes): transforms.py:561
    w, h = container.size
1 memory blocks (416 bytes): ticker.py:2102
    edge = _Edge_integer(step, offset)
1 memory blocks (416 bytes): ticker.py:1744
    return self.tick_values(None, None)
1 memory blocks (416 bytes): ticker.py:703
    return self.fix_minus(s)
1 memory blocks (416 bytes): text.py:145
    self.set_fontproperties(fontproperties)
1 memory blocks (416 bytes): pyplot.py:910
    manager = _pylab_helpers.Gcf.get_active()
1 memory blocks (416 bytes): patches.py:609
    transform = self.get_transform()
1 memory blocks (416 bytes): patches.py:573
    self._set_gc_clip(gc)
1 memory blocks (416 bytes): patches.py:572
    gc.set_antialiased(self._antialiased)
1 memory blocks (416 bytes): patches.py:110
    self.set_joinstyle(joinstyle)
1 memory blocks (416 bytes): patches.py:109
    self.set_capstyle(capstyle)
1 memory blocks (416 bytes): patches.py:108
    self.set_hatch(hatch)
1 memory blocks (416 bytes): patches.py:104
    self.set_fill(fill)
1 memory blocks (416 bytes): lines.py:643
    self.set_xdata(x)
1 memory blocks (416 bytes): lines.py:394
    self.pickradius = pickradius
1 memory blocks (416 bytes): lines.py:370
    self.set_color(color)
1 memory blocks (416 bytes): lines.py:351
    self.set_solid_joinstyle(solid_joinstyle)
1 memory blocks (416 bytes): lines.py:350
    self.set_solid_capstyle(solid_capstyle)
1 memory blocks (416 bytes): lines.py:349
    self.set_dash_joinstyle(dash_joinstyle)
1 memory blocks (416 bytes): lines.py:348
    self.set_dash_capstyle(dash_capstyle)
1 memory blocks (416 bytes): image.py:308
    cm.ScalarMappable.changed(self)
1 memory blocks (416 bytes): image.py:252
    self.set_filterrad(filterrad)
1 memory blocks (416 bytes): font_manager.py:1337
    + self.score_variant(prop.get_variant(), font.variant)
1 memory blocks (416 bytes): font_manager.py:1336
    + self.score_style(prop.get_style(), font.style)
1 memory blocks (416 bytes): font_manager.py:684
    self.set_file(fname)
1 memory blocks (416 bytes): figure.py:2310
    self.set_tight_layout(tight_layout)
1 memory blocks (416 bytes): figure.py:2297
    self._set_artist_props(self.patch)
1 memory blocks (416 bytes): figure.py:230
    (artist for artist in artists if not artist.get_animated()),
1 memory blocks (416 bytes): colors.py:1252
    resdat = result.data
1 memory blocks (416 bytes): colors.py:1238
    self.autoscale_None(result)
1 memory blocks (416 bytes): colors.py:1205
    if np.issubdtype(dtype, np.integer) or dtype.type is np.bool_:
1 memory blocks (416 bytes): colors.py:613
    self._init()
1 memory blocks (416 bytes): cm.py:359
    self.set_cmap(cmap)  # The Colormap instance of this ScalarMappable.
1 memory blocks (416 bytes): __init__.py:876
    return [x() for x in siblings]
1 memory blocks (416 bytes): _backend_tk.py:413
    self.toolbar = self._get_toolbar()
1 memory blocks (416 bytes): _backend_tk.py:212
    self._tkcanvas.focus_set()
1 memory blocks (416 bytes): backend_bases.py:2780
    self.set_window_title(f"Figure {num:d}")
1 memory blocks (416 bytes): backend_bases.py:2135
    for size in self.figure.bbox.max)
1 memory blocks (416 bytes): backend_bases.py:660
    return GraphicsContextBase()
1 memory blocks (416 bytes): axis.py:2527
    length = ends.height * 72
1 memory blocks (416 bytes): axis.py:2265
    length = ends.width * 72
1 memory blocks (416 bytes): axis.py:1938
    if all(tick.tick1line.get_visible()
1 memory blocks (416 bytes): axis.py:1659
    self.minor.locator = locator
1 memory blocks (416 bytes): axis.py:1629
    level.formatter = formatter
1 memory blocks (416 bytes): axis.py:764
    self._scale.set_default_locators_and_formatters(self)
1 memory blocks (416 bytes): axis.py:670
    self._set_artist_props(self.offsetText)
1 memory blocks (416 bytes): axis.py:181
    self._set_artist_props(artist)
1 memory blocks (416 bytes): _base.py:2337
    updatex, updatey = line_trf.contains_branch_seperately(self.transData)
1 memory blocks (416 bytes): _base.py:2262
    self._set_artist_props(image)
1 memory blocks (416 bytes): _base.py:1889
    pb = position.frozen()
1 memory blocks (416 bytes): _base.py:1885
    if self in self._twinned_axes:
1 memory blocks (416 bytes): _base.py:1871
    position = self.get_position(original=True)
1 memory blocks (416 bytes): _base.py:1842
    tymin, tymax = self.yaxis.get_transform().transform(self.get_ybound())
1 memory blocks (416 bytes): _base.py:1841
    txmin, txmax = self.xaxis.get_transform().transform(self.get_xbound())
1 memory blocks (416 bytes): _base.py:1294
    self.patch.set_edgecolor('none')
1 memory blocks (416 bytes): _base.py:1293
    self.patch.set_facecolor(self._facecolor)
1 memory blocks (416 bytes): _base.py:993
    mtransforms.blended_transform_factory(
1 memory blocks (416 bytes): _base.py:992
    self.transScale.set(
1 memory blocks (416 bytes): _base.py:458
    if any(v is None for v in tup):
1 memory blocks (416 bytes): _pylab_helpers.py:121
    cls.set_active(manager)
1 memory blocks (416 bytes): PngImagePlugin.py:886
    ImageFile.ImageFile.load_prepare(self)
1 memory blocks (416 bytes): Image.py:2650
    _check_size(size)
1 memory blocks (416 bytes): Image.py:1951
    return self.copy()
1 memory blocks (416 bytes): contextlib.py:511
    _exit_wrapper = self._create_exit_wrapper(cm, cm_exit)
1 memory blocks (416 bytes): abc.py:119
    return _abc_instancecheck(cls, instance)
7 memory blocks (411 bytes): fractions.py:378
    reverse.__name__ = '__r' + fallback_operator.__name__ + '__'
1 memory blocks (408 bytes): core.py:295
    dtype = _get_dtype_of(obj)
1 memory blocks (408 bytes): linalg.py:559
    signature = 'D->D' if isComplexType(t) else 'd->d'
1 memory blocks (408 bytes): arraysetops.py:312
    uniq = uniq.view(orig_dtype)
1 memory blocks (408 bytes): transforms.py:1766
    self._set(child)
1 memory blocks (408 bytes): transforms.py:799
    frozen_bbox = super().frozen()
1 memory blocks (408 bytes): ticker.py:458
    self.set_useMathText(useMathText)
1 memory blocks (408 bytes): ticker.py:438
    self.set_useOffset(useOffset)
1 memory blocks (408 bytes): text.py:1147
    self.set_y(xy[1])
1 memory blocks (408 bytes): text.py:1146
    self.set_x(xy[0])
1 memory blocks (408 bytes): text.py:148
    self.set_wrap(wrap)
1 memory blocks (408 bytes): text.py:147
    self.set_parse_math(parse_math)
1 memory blocks (408 bytes): text.py:146
    self.set_usetex(usetex)
1 memory blocks (408 bytes): spines.py:238
    low, high = self.axes.viewLim.intervaly
1 memory blocks (408 bytes): spines.py:223
    self.axis.clear()
1 memory blocks (408 bytes): pyplot.py:319
    return _backend_mod.draw_if_interactive(*args, **kwargs)
1 memory blocks (408 bytes): __init__.py:108
    return projection_registry.get_projection_class(projection)
1 memory blocks (408 bytes): patches.py:574
    gc.set_url(self._url)
1 memory blocks (408 bytes): patches.py:570
    gc.set_joinstyle(self._joinstyle)
1 memory blocks (408 bytes): patches.py:569
    gc.set_capstyle(self._capstyle)
1 memory blocks (408 bytes): patches.py:567
    gc.set_linewidth(lw)
1 memory blocks (408 bytes): patches.py:107
    self.set_antialiased(antialiased)
1 memory blocks (408 bytes): lines.py:835
    w = renderer.points_to_pixels(self._markersize)
1 memory blocks (408 bytes): lines.py:816
    .get_transformed_points_and_affine())
1 memory blocks (408 bytes): lines.py:779
    if self._marker and self._markersize > 0:
1 memory blocks (408 bytes): lines.py:776
    renderer.draw_path(gc, tpath, affine.frozen())
1 memory blocks (408 bytes): lines.py:389
    self.set_markeredgewidth(markeredgewidth)
1 memory blocks (408 bytes): lines.py:379
    self.set_markersize(markersize)
1 memory blocks (408 bytes): lines.py:378
    self.set_antialiased(antialiased)
1 memory blocks (408 bytes): lines.py:377
    self.set_markevery(markevery)
1 memory blocks (408 bytes): image.py:637
    gc.set_gid(self.get_gid())
1 memory blocks (408 bytes): image.py:569
    alpha = self._get_scalar_alpha()
1 memory blocks (408 bytes): image.py:255
    self.set_resample(resample)
1 memory blocks (408 bytes): image.py:251
    self.set_filternorm(filternorm)
1 memory blocks (408 bytes): gridspec.py:562
    self.num2 = num2
1 memory blocks (408 bytes): gridspec.py:56
    self.set_width_ratios(width_ratios)
1 memory blocks (408 bytes): gridspec.py:55
    self.set_height_ratios(height_ratios)
1 memory blocks (408 bytes): font_manager.py:1150
    options = [*map(str.lower, self._expand_aliases(family1))]
1 memory blocks (408 bytes): font_manager.py:804
    self._family = _normalize_font_family(family)
1 memory blocks (408 bytes): font_manager.py:679
    self.set_family(family)
1 memory blocks (408 bytes): figure.py:232
    for ax in self._localaxes.as_list():
1 memory blocks (408 bytes): figure.py:220
    artists = self.get_children()
1 memory blocks (408 bytes): colors.py:1161
    self._changed()
1 memory blocks (408 bytes): colors.py:920
    self._set_extremes()
1 memory blocks (408 bytes): cm.py:357
    self.set_norm(norm)  # The Normalize instance of this ScalarMappable.
1 memory blocks (408 bytes): backend_agg.py:88
    super().__init__()
1 memory blocks (408 bytes): backend_bases.py:2330
    self.figure.set_canvas(self)
1 memory blocks (408 bytes): axis.py:1662
    locator.set_axis(self)
1 memory blocks (408 bytes): axis.py:1056
    self.minor.formatter.set_locs(minor_locs)
1 memory blocks (408 bytes): axis.py:1048
    self.major.formatter.set_locs(major_locs)
1 memory blocks (408 bytes): axis.py:769
    self.isDefault_minfmt = True
1 memory blocks (408 bytes): axis.py:768
    self.isDefault_majfmt = True
1 memory blocks (408 bytes): axis.py:767
    self.isDefault_minloc = True
1 memory blocks (408 bytes): axis.py:766
    self.isDefault_majloc = True
1 memory blocks (408 bytes): axis.py:491
    trans, va, ha = self._get_text2_transform()
1 memory blocks (408 bytes): axis.py:486
    trans, va, ha = self._get_text1_transform()
1 memory blocks (408 bytes): axis.py:425
    trans, va, ha = self._get_text1_transform()
1 memory blocks (408 bytes): axis.py:341
    a.set_figure(self.figure)
1 memory blocks (408 bytes): _base.py:2988
    bb = ax.get_window_extent(renderer)
1 memory blocks (408 bytes): _base.py:758
    self.dataLim = mtransforms.Bbox.null()
1 memory blocks (408 bytes): _base.py:748
    self.spines.right.register_axis(self.yaxis)
1 memory blocks (408 bytes): _base.py:639
    self.set_navigate_mode(None)
1 memory blocks (408 bytes): _base.py:624
    self._init_axis()
1 memory blocks (408 bytes): artist.py:1068
    self.pchanged()
1 memory blocks (408 bytes): artist.py:890
    gc.set_clip_rectangle(self.clipbox)
1 memory blocks (408 bytes): artist.py:172
    self.axes = None
1 memory blocks (408 bytes): PngImagePlugin.py:1033
    fp.write(o32(crc))
1 memory blocks (408 bytes): PngImagePlugin.py:956
    self.png.close()
1 memory blocks (408 bytes): ImageFile.py:202
    self.load_prepare()
1 memory blocks (408 bytes): sre_parse.py:468
    del item[0]
1 memory blocks (408 bytes): pathlib.py:878
    return _PathParents(self)
2 memory blocks (405 bytes): _filters.py:180
    def _gaussian_kernel1d(sigma, order, radius):
7 memory blocks (404 bytes): fractions.py:365
    forward.__name__ = '__' + fallback_operator.__name__ + '__'
2 memory blocks (404 bytes): backend_agg.py:52
    def get_hinting_flag():
2 memory blocks (402 bytes): lines.py:31
    def _get_dash_pattern(style):
2 memory blocks (401 bytes): font_manager.py:658
    def __init__(self, family=None, style=None, variant=None, weight=None,
1 memory blocks (400 bytes): _filters.py:133
    mode = _ni_support._extend_mode_to_code(mode)
1 memory blocks (400 bytes): core.py:3684
    self._mask = _shrink_mask(self._mask)
1 memory blocks (400 bytes): arraysetops.py:320
    return _unpack_tuple(output)
1 memory blocks (400 bytes): transforms.py:2787
    return self._transformed_path, self.get_affine()
1 memory blocks (400 bytes): transforms.py:1789
    return self.get_matrix()
1 memory blocks (400 bytes): transforms.py:1461
    for remainder, sub_tree in other._iter_break_from_left_to_right():
1 memory blocks (400 bytes): transforms.py:363
    return self.get_points()[:, 0]
1 memory blocks (400 bytes): text.py:696
    canvasw, canvash = renderer.get_canvas_width_height()
1 memory blocks (400 bytes): text.py:361
    malign = self._get_multialignment()
1 memory blocks (400 bytes): pyplot.py:957
    fig = gcf()
1 memory blocks (400 bytes): pyplot.py:305
    _warn_if_gui_out_of_main_thread()
1 memory blocks (400 bytes): markers.py:280
    self._recache()
1 memory blocks (400 bytes): lines.py:834
    marker_trans = marker.get_transform()
1 memory blocks (400 bytes): lines.py:750
    tpath, affine = (self._get_transformed_path()
1 memory blocks (400 bytes): image.py:1660
    pil_kwargs["pnginfo"] = pnginfo = PIL.PngImagePlugin.PngInfo()
1 memory blocks (400 bytes): gridspec.py:212
    for ax in figure.get_axes():
1 memory blocks (400 bytes): gridspec.py:166
    nrows, ncols = self.get_geometry()
1 memory blocks (400 bytes): figure.py:2816
    renderer.close_group('figure')
1 memory blocks (400 bytes): figure.py:1514
    if self._axstack.empty():
1 memory blocks (400 bytes): figure.py:229
    artists = sorted(
1 memory blocks (400 bytes): __init__.py:708
    xm.shrink_mask()
1 memory blocks (400 bytes): __init__.py:270
    del proxy_to_cid[current_proxy]
1 memory blocks (400 bytes): backend_agg.py:542
    filename_or_obj, self.buffer_rgba(), format="png", origin="upper",
1 memory blocks (400 bytes): backend_agg.py:478
    return self.renderer.buffer_rgba()
1 memory blocks (400 bytes): backend_agg.py:96
    self._update_methods()
1 memory blocks (400 bytes): backend_bases.py:3301
    self._nav_stack.clear()
1 memory blocks (400 bytes): backend_bases.py:3033
    self.canvas.set_cursor(self._lastCursor)
1 memory blocks (400 bytes): backend_bases.py:2799
    self.toolbar.update()
1 memory blocks (400 bytes): axis.py:2502
    return self.axes.dataLim.minposy
1 memory blocks (400 bytes): axis.py:2389
    x, y = self.offsetText.get_position()
1 memory blocks (400 bytes): axis.py:2364
    left = bbox.x0
1 memory blocks (400 bytes): axis.py:2240
    return self.axes.dataLim.minposx
1 memory blocks (400 bytes): axis.py:2129
    bottom = bbox.y0
1 memory blocks (400 bytes): axis.py:1661
    self.minor.formatter._set_locator(locator)
1 memory blocks (400 bytes): axis.py:1045
    major_locs = self.get_majorticklocs()
1 memory blocks (400 bytes): axis.py:166
    self.gridline.get_path()._interpolation_steps = \
1 memory blocks (400 bytes): _base.py:4512
    *self.spines.values(),
1 memory blocks (400 bytes): _base.py:3878
    bottom, top = self.get_ylim()
1 memory blocks (400 bytes): _base.py:3530
    left, right = self.get_xlim()
1 memory blocks (400 bytes): _base.py:2520
    if axis is not None and data is not None and not axis.have_units():
1 memory blocks (400 bytes): _base.py:1298
    self.set_axis_on()
1 memory blocks (400 bytes): _base.py:1199
    spine.clear()
1 memory blocks (400 bytes): ImageFile.py:488
    tile.sort(key=_tilesort)
1 memory blocks (400 bytes): Image.py:2178
    self._ensure_mutable()
1 memory blocks (400 bytes): Image.py:597
    self._copy()
1 memory blocks (400 bytes): pathlib.py:529
    if idx >= len(self) or idx < -len(self):
1 memory blocks (400 bytes): _collections_abc.py:924
    for key in self._mapping:
1 memory blocks (400 bytes): _collections_abc.py:861
    return len(self._mapping)
2 memory blocks (399 bytes): __init__.py:65
    def check_isinstance(_types, **kwargs):
1 memory blocks (392 bytes): transforms.py:2880
    if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:
1 memory blocks (392 bytes): transforms.py:2423
    if self._a.is_affine and self._b.is_affine:
1 memory blocks (392 bytes): text.py:1244
    elif not self.get_parse_math():
1 memory blocks (392 bytes): text.py:728
    if self.get_usetex():
1 memory blocks (392 bytes): text.py:717
    if renderer.flipy():
1 memory blocks (392 bytes): text.py:705
    gc.set_foreground(self.get_color())
1 memory blocks (392 bytes): text.py:679
    if self.get_text() == '':
1 memory blocks (392 bytes): text.py:625
    if not self.get_wrap():
1 memory blocks (392 bytes): text.py:390
    rotation_mode = self.get_rotation_mode()
1 memory blocks (392 bytes): text.py:226
    if self.get_transform_rotates_text():
1 memory blocks (392 bytes): pyplot.py:757
    allnums = get_fignums()
1 memory blocks (392 bytes): patches.py:596
    gc.restore()
1 memory blocks (392 bytes): patches.py:586
    if self.get_path_effects():
1 memory blocks (392 bytes): patches.py:583
    if self.get_sketch_params() is not None:
1 memory blocks (392 bytes): patches.py:560
    gc = renderer.new_gc()
1 memory blocks (392 bytes): lines.py:930
    if self._marker.get_fillstyle() == 'none':
1 memory blocks (392 bytes): lines.py:846
    alt_marker_path = marker.get_alt_path()
1 memory blocks (392 bytes): lines.py:837
    if cbook._str_equal(marker.get_marker(), ","):
1 memory blocks (392 bytes): lines.py:833
    marker_path = marker.get_path()
1 memory blocks (392 bytes): lines.py:832
    gc.set_capstyle(marker.get_capstyle())
1 memory blocks (392 bytes): lines.py:831
    gc.set_joinstyle(marker.get_joinstyle())
1 memory blocks (392 bytes): lines.py:827
    snap = marker.get_snap_threshold()
1 memory blocks (392 bytes): lines.py:820
    markevery = self.get_markevery()
1 memory blocks (392 bytes): lines.py:807
    if self.get_drawstyle() != "default":
1 memory blocks (392 bytes): lines.py:755
    gc.set_url(self.get_url())
1 memory blocks (392 bytes): image.py:647
    renderer, renderer.get_image_magnification())
1 memory blocks (392 bytes): image.py:638
    if (renderer.option_scale_image()  # Renderer supports transform kwarg.
1 memory blocks (392 bytes): image.py:629
    if self.get_array().size == 0:
1 memory blocks (392 bytes): image.py:128
    else renderer.option_image_nocomposite())
1 memory blocks (392 bytes): gridspec.py:673
    gridspec = self.get_gridspec()
1 memory blocks (392 bytes): font_manager.py:718
    self.get_math_fontfamily())
1 memory blocks (392 bytes): font_manager.py:717
    self.get_file(),
1 memory blocks (392 bytes): font_manager.py:716
    self.get_size_in_points(),
1 memory blocks (392 bytes): font_manager.py:715
    self.get_stretch(),
1 memory blocks (392 bytes): font_manager.py:714
    self.get_weight(),
1 memory blocks (392 bytes): font_manager.py:713
    self.get_variant(),
1 memory blocks (392 bytes): font_manager.py:712
    self.get_slant(),
1 memory blocks (392 bytes): figure.py:2802
    if self.get_tight_layout() and self.axes:
1 memory blocks (392 bytes): figure.py:2800
    if self.get_constrained_layout() and self.axes:
1 memory blocks (392 bytes): figure.py:231
    key=lambda artist: artist.get_zorder())
1 memory blocks (392 bytes): colors.py:1240
    (vmin,), _ = self.process_value(self.vmin)
1 memory blocks (392 bytes): colors.py:1204
    dtype = np.min_scalar_type(value)
1 memory blocks (392 bytes): backend_agg.py:543
    dpi=self.figure.dpi, metadata=metadata, pil_kwargs=pil_kwargs)
1 memory blocks (392 bytes): backend_bases.py:999
    hatch = self.get_hatch()
1 memory blocks (392 bytes): axis.py:1291
    if self.remove_overlapping_locs:
1 memory blocks (392 bytes): axis.py:753
    return self._scale.get_transform()
1 memory blocks (392 bytes): _base.py:3028
    locator = self.get_axes_locator()
1 memory blocks (392 bytes): _base.py:2985
    or ax.xaxis.get_label_position() == 'top'):
1 memory blocks (392 bytes): _base.py:2263
    if not image.get_label():
1 memory blocks (392 bytes): _base.py:1879
    trans = self.get_figure().transSubfigure
1 memory blocks (392 bytes): _base.py:1873
    aspect = self.get_aspect()
1 memory blocks (392 bytes): _base.py:1106
    if a.mouseover:
1 memory blocks (392 bytes): _base.py:1102
    if not a.is_transform_set():
1 memory blocks (392 bytes): _base.py:75
    return get_method(self)(*args, **kwargs)
1 memory blocks (392 bytes): _axes.py:5490
    if im.get_clip_path() is None:
1 memory blocks (392 bytes): artist.py:1151
    self.sticky_edges.y[:] = other.sticky_edges.y.copy()
1 memory blocks (392 bytes): artist.py:297
    if self.get_animated():
1 memory blocks (392 bytes): artist.py:54
    if artist.get_rasterized():
1 memory blocks (392 bytes): artist.py:52
    if artist.get_agg_filter() is not None:
1 memory blocks (392 bytes): __init__.py:221
    return props[name].__get__(instance)
1 memory blocks (392 bytes): ImageTk.py:133
    return str(self.__photo)
1 memory blocks (392 bytes): ImageFile.py:493
    bufsize = max(MAXBLOCK, bufsize, im.size[0] * 4)  # see RawEncode.c
2 memory blocks (387 bytes): artist.py:439
    def get_transform(self):
2 memory blocks (386 bytes): transforms.py:2421
    def transform_non_affine(self, points):
2 memory blocks (385 bytes): queue.py:154
    def get(self, block=True, timeout=None):
12 memory blocks (384 bytes): function_base.py:5155
    output[0].shape = (1, -1) + s0[2:]
1 memory blocks (384 bytes): pyplot.py:296
    and threading.current_thread() is not threading.main_thread()):
2 memory blocks (383 bytes): transforms.py:2380
    def _invalidate_internal(self, value, invalidating_node):
2 memory blocks (380 bytes): transforms.py:2258
    def get_affine(self):
2 memory blocks (376 bytes): transforms.py:2753
    self._transformed_path = None
2 memory blocks (376 bytes): transforms.py:2681
    self._scale_trans = scale_trans
2 memory blocks (376 bytes): transforms.py:2651
    self._mtx = None
2 memory blocks (376 bytes): transforms.py:2597
    self._mtx = None
2 memory blocks (376 bytes): transforms.py:2367
    self._a = a
2 memory blocks (376 bytes): transforms.py:2207
    self._affine = None
2 memory blocks (376 bytes): transforms.py:1785
    self._inverted = None
2 memory blocks (376 bytes): transforms.py:1118
    self._points = None
2 memory blocks (376 bytes): transforms.py:781
    self._ignore = True
2 memory blocks (376 bytes): figure.py:149
    setattr(self, key, mpl.rcParams[f"figure.subplot.{key}"])
2 memory blocks (376 bytes): backend_bases.py:2790
    self.toolmanager = (ToolManager(canvas.figure)
2 memory blocks (376 bytes): ScanMatcher_OGBased.py:15
    self.moveRSigma = moveRSigma
2 memory blocks (362 bytes): __init__.py:101
    def _cnfmerge(cnfs):
2 memory blocks (360 bytes): PpmImagePlugin.py:25
    MODES = {
2 memory blocks (360 bytes): JpegPresets.py:67
    presets = {
2 memory blocks (360 bytes): JpegImagePlugin.py:575
    RAWMODE = {
2 memory blocks (360 bytes): BmpImagePlugin.py:68
    COMPRESSIONS = {"RAW": 0, "RLE8": 1, "RLE4": 2, "BITFIELDS": 3, "JPEG": 4, "PNG": 5}
2 memory blocks (360 bytes): BmpImagePlugin.py:38
    BIT2MODE = {
2 memory blocks (360 bytes): __init__.py:1364
    def _bind(self, what, sequence, func, add, needcleanup=1):
2 memory blocks (354 bytes): transforms.py:2508
    def composite_transform_factory(a, b):
2 memory blocks (347 bytes): artist.py:1046
    def update(self, props):
7 memory blocks (336 bytes): ScanMatcher_OGBased.py:127
    rotatedPxIdx = rotatedPxIdx + xv
2 memory blocks (333 bytes): threading.py:288
    def wait(self, timeout=None):
2 memory blocks (332 bytes): stride_tricks.py:416
    def _broadcast_shape(*args):
2 memory blocks (331 bytes): fromnumeric.py:2177
    @array_function_dispatch(_sum_dispatcher)
2 memory blocks (327 bytes): backend_agg.py:251
    def get_text_width_height_descent(self, s, prop, ismath):
4 memory blocks (320 bytes): TiffImagePlugin.py:954
    def from_v2(cls, original):
4 memory blocks (320 bytes): fractions.py:182
    def from_decimal(cls, dec):
4 memory blocks (320 bytes): fractions.py:168
    def from_float(cls, f):
2 memory blocks (320 bytes): transforms.py:1480
    def transform(self, values):
2 memory blocks (320 bytes): __init__.py:1691
    def normalize_kwargs(kw, alias_mapping=None):
6 memory blocks (318 bytes): core.py:5829
    axis=axis, out=out, **kwargs).view(type(self))
6 memory blocks (318 bytes): core.py:2870
    _data._mask = _data._mask.copy()
6 memory blocks (314 bytes): Image.py:3126
    id = id.upper()
2 memory blocks (313 bytes): numerictypes.py:357
    @set_module('numpy')
2 memory blocks (309 bytes): _filters.py:211
    @_ni_docstrings.docfiller
2 memory blocks (308 bytes): transforms.py:2602
    def get_matrix(self):
2 memory blocks (303 bytes): fromnumeric.py:40
    def _wrapit(obj, method, *args, **kwds):
2 memory blocks (302 bytes): OccupancyGrid.py:108
    def checkMapToExpand(self, x, y):
2 memory blocks (299 bytes): markers.py:237
    def _recache(self):
2 memory blocks (298 bytes): font_manager.py:1206
    def score_weight(self, weight1, weight2):
1 memory blocks (296 bytes): <frozen importlib._bootstrap>:551
1 memory blocks (296 bytes): <frozen importlib._bootstrap>:209
1 memory blocks (296 bytes): path.py:180
    pth._readonly = False
1 memory blocks (296 bytes): font_manager.py:667
    self._size = rcParams['font.size']
2 memory blocks (292 bytes): OccupancyGrid.py:102
    def convertRealXYToMapIdx(self, x, y):
2 memory blocks (280 bytes): ticker.py:1886
    scale = 10 ** (math.log10(dv / n) // 1)
2 memory blocks (278 bytes): font_manager.py:1224
    def score_size(self, size1, size2):
2 memory blocks (278 bytes): __init__.py:1290
    def _to_unmasked_float_array(x):
2 memory blocks (276 bytes): font_manager.py:1188
    def score_stretch(self, stretch1, stretch2):
5 memory blocks (267 bytes): sre_parse.py:282
    result += c
2 memory blocks (265 bytes): transforms.py:2351
    def __init__(self, a, b, **kwargs):
2 memory blocks (265 bytes): text.py:936
    def set_color(self, color):
6 memory blocks (264 bytes): threading.py:313
    waiter = _allocate_lock()
4 memory blocks (263 bytes): contextlib.py:102
    def __init__(self, func, args, kwds):
2 memory blocks (262 bytes): fromnumeric.py:71
    def _wrapreduction(obj, ufunc, method, axis, dtype, out, **kwargs):
2 memory blocks (261 bytes): _ni_support.py:58
    def _normalize_sequence(input, rank):
2 memory blocks (258 bytes): transforms.py:2057
    def scale(self, sx, sy=None):
4 memory blocks (256 bytes): __init__.py:2020
    origs = {}
3 memory blocks (256 bytes): fractions.py:62
    def __new__(cls, numerator=0, denominator=None, *, _normalize=True):
2 memory blocks (256 bytes): transforms.py:2688
    def get_matrix(self):
1 memory blocks (256 bytes): colors.py:633
    xa[xa < 0] = self._i_under
2 memory blocks (253 bytes): lines.py:1149
    def _set_markercolor(self, name, has_rcdefault, val):
2 memory blocks (252 bytes): text.py:25
    def get_rotation(rotation):
2 memory blocks (251 bytes): transforms.py:2441
    def get_affine(self):
2 memory blocks (250 bytes): font_manager.py:844
    def set_stretch(self, stretch):
2 memory blocks (244 bytes): pyplot.py:812
    def _auto_draw_if_interactive(fig, val):
10 memory blocks (240 bytes): OccupancyGrid.py:89
    self.mapYLim[1] = self.OccupancyGridY[-1, 0]
10 memory blocks (240 bytes): OccupancyGrid.py:88
    self.mapYLim[0] = self.OccupancyGridY[0, 0]
10 memory blocks (240 bytes): OccupancyGrid.py:87
    self.mapXLim[1] = self.OccupancyGridX[0, -1]
10 memory blocks (240 bytes): OccupancyGrid.py:86
    self.mapXLim[0] = self.OccupancyGridX[0, 0]
10 memory blocks (240 bytes): OccupancyGrid.py:22
    self.angularStep = lidarFOV / numSamplesPerRev
10 memory blocks (240 bytes): FastSlam.py:127
    movingTheta = math.acos(xMove / move)
10 memory blocks (240 bytes): FastSlam.py:103
    rawMovingTheta = math.acos(rawXMove / rawMove)  # between -pi and +pi
10 memory blocks (240 bytes): FastSlam.py:60
    self.particles[i].weight = self.particles[i].weight / weightSum
4 memory blocks (240 bytes): Image.py:403
    decoder = getattr(core, decoder_name + "_decoder")
3 memory blocks (240 bytes): axis.py:350
    for name, target in [("gridOn", self.gridline),
2 memory blocks (240 bytes): path.py:162
    @classmethod
2 memory blocks (240 bytes): font_manager.py:826
    def set_weight(self, weight):
2 memory blocks (238 bytes): backend_bases.py:935
    def set_foreground(self, fg, isRGBA=False):
2 memory blocks (234 bytes): transforms.py:1996
    def rotate(self, theta):
2 memory blocks (233 bytes): font_manager.py:687
    @classmethod
2 memory blocks (232 bytes): JpegPresets.py:220
    'maximum':      {'subsampling':  0,  # "4:4:4"
2 memory blocks (232 bytes): JpegPresets.py:201
    'high':         {'subsampling':  0,  # "4:4:4"
2 memory blocks (232 bytes): JpegPresets.py:182
    'medium':       {'subsampling':  2,  # "4:2:0"
2 memory blocks (232 bytes): JpegPresets.py:163
    'low':          {'subsampling':  2,  # "4:2:0"
2 memory blocks (232 bytes): JpegPresets.py:144
    'web_maximum':  {'subsampling':  0,  # "4:4:4"
2 memory blocks (232 bytes): JpegPresets.py:125
    'web_very_high': {'subsampling':  0,  # "4:4:4"
2 memory blocks (232 bytes): JpegPresets.py:106
    'web_high':     {'subsampling':  0,  # "4:4:4"
2 memory blocks (227 bytes): backend_bases.py:735
    def __init__(self):
2 memory blocks (226 bytes): ticker.py:577
    def __call__(self, x, pos=None):
2 memory blocks (226 bytes): backend_bases.py:803
    def get_clip_path(self):
4 memory blocks (224 bytes): colors.py:180
    colors = prop_cycler.by_key().get('color', ['k'])
2 memory blocks (224 bytes): TiffImagePlugin.py:1063
    def n_frames(self):
2 memory blocks (224 bytes): TiffImagePlugin.py:947
    tagdata = property(lambda self: self._tagdata)
2 memory blocks (224 bytes): TiffImagePlugin.py:946
    tags = property(lambda self: self._tags_v1)
2 memory blocks (224 bytes): TiffImagePlugin.py:514
    def legacy_api(self, value):
2 memory blocks (224 bytes): TiffImagePlugin.py:510
    offset = property(lambda self: self._offset)
2 memory blocks (224 bytes): TiffImagePlugin.py:509
    prefix = property(lambda self: self._prefix)
2 memory blocks (224 bytes): TiffImagePlugin.py:339
    def denominator(a):
2 memory blocks (224 bytes): TiffImagePlugin.py:335
    def numerator(a):
2 memory blocks (224 bytes): GifImagePlugin.py:107
    def is_animated(self):
2 memory blocks (224 bytes): GifImagePlugin.py:95
    def n_frames(self):
2 memory blocks (224 bytes): fractions.py:261
    def denominator(a):
2 memory blocks (224 bytes): fractions.py:257
    def numerator(a):
2 memory blocks (223 bytes): _base.py:915
    def get_yaxis_transform(self, which='grid'):
2 memory blocks (223 bytes): _base.py:839
    def get_xaxis_transform(self, which='grid'):
2 memory blocks (222 bytes): lines.py:1069
    def set_linewidth(self, w):
2 memory blocks (221 bytes): transforms.py:207
    def set_children(self, *children):
3 memory blocks (216 bytes): text.py:287
    self.figure.dpi, weakref.ref(renderer),
2 memory blocks (216 bytes): _base.py:765
    def _unstale_viewLim(self):
2 memory blocks (208 bytes): ImageOps.py:411
    def fit(image, size, method=Image.BICUBIC, bleed=0.0, centering=(0.5, 0.5)):
2 memory blocks (208 bytes): ImageOps.py:268
    def pad(image, size, method=Image.BICUBIC, color=None, centering=(0.5, 0.5)):
3 memory blocks (201 bytes): contextlib.py:130
    def __enter__(self):
2 memory blocks (201 bytes): transforms.py:180
    def _invalidate_internal(self, value, invalidating_node):
5 memory blocks (200 bytes): FastSlam.py:197
    xRange, yRange = [0, 20], [0, 20]
3 memory blocks (200 bytes): image.py:649
    renderer.draw_image(gc, l, b, im)
3 memory blocks (200 bytes): __init__.py:790
    self.filters = []
2 memory blocks (200 bytes): _pylab_helpers.py:115
    "button_press_event", lambda event: cls.set_active(manager))
2 memory blocks (196 bytes): shape_base.py:612
    @array_function_dispatch(_column_stack_dispatcher)
2 memory blocks (196 bytes): text.py:115
    def __init__(self,
2 memory blocks (196 bytes): artist.py:723
    def set_figure(self, fig):
2 memory blocks (193 bytes): __init__.py:276
    def process(self, s, *args, **kwargs):
12 memory blocks (192 bytes): function_base.py:140
    y = _nx.arange(0, num, dtype=dt).reshape((-1,) + (1,) * ndim(delta))
5 memory blocks (192 bytes): FastSlam.py:170
    print(count)
3 memory blocks (192 bytes): re.py:311
    _cache[type(pattern), pattern, flags] = p
2 memory blocks (192 bytes): TiffImagePlugin.py:1881
    def seek(self, offset, whence=io.SEEK_SET):
2 memory blocks (192 bytes): TiffImagePlugin.py:1131
    def load(self):
2 memory blocks (192 bytes): TiffImagePlugin.py:1028
    def __init__(self, fp=None, filename=None):
2 memory blocks (192 bytes): TiffImagePlugin.py:942
    def __init__(self, *args, **kwargs):
2 memory blocks (192 bytes): ImageOps.py:318
    def scale(image, factor, resample=Image.BICUBIC):
2 memory blocks (192 bytes): ImageOps.py:240
    def contain(image, size, method=Image.BICUBIC):
2 memory blocks (192 bytes): GifImagePlugin.py:356
    def load_prepare(self):
1 memory blocks (192 bytes): OccupancyGrid.py:134
    spokeIdx = int(np.rint((self.spokesStartIdx + spokesOffsetIdxByTheta + i) % self.numSpokes))
1 memory blocks (192 bytes): OccupancyGrid.py:44
    rangeIdxGrid = np.sqrt(xGrid**2 + yGrid**2)
2 memory blocks (190 bytes): numeric.py:561
    @array_function_dispatch(_argwhere_dispatcher)
2 memory blocks (188 bytes): lines.py:929
    def _get_markerfacecolor(self, alt=False):
2 memory blocks (188 bytes): font_manager.py:915
    def set_math_fontfamily(self, fontfamily):
2 memory blocks (186 bytes): stride_tricks.py:25
    def _maybe_view_as_subclass(original_array, new_array):
2 memory blocks (184 bytes): font_manager.py:1417
    def get_font(filename, hinting_factor=None):
2 memory blocks (180 bytes): fromnumeric.py:53
    def _wrapfunc(obj, method, *args, **kwds):
2 memory blocks (180 bytes): ScanMatcher_OGBased.py:162
    def rotate(self, origin, point, angle):
2 memory blocks (177 bytes): text.py:162
    def update(self, kwargs):
3 memory blocks (171 bytes): _binary.py:85
    return unpack_from(">I", c, o)[0]
2 memory blocks (169 bytes): figure.py:2388
    def _set_dpi(self, dpi, forward=True):
3 memory blocks (168 bytes): function_base.py:1444
    slice2 = [slice(None)] * nd
3 memory blocks (168 bytes): function_base.py:1443
    slice1 = [slice(None)] * nd
3 memory blocks (168 bytes): spines.py:342
    _api.check_in_list(['axes', 'outward', 'data'],
3 memory blocks (168 bytes): __init__.py:267
    for current_proxy, current_cid in list(proxy_to_cid.items()):
3 memory blocks (168 bytes): axis.py:210
    _api.check_in_list(['in', 'out', 'inout'], tickdir=tickdir)
3 memory blocks (168 bytes): __init__.py:154
    for t, s in zip(target_shape, data_shape)
3 memory blocks (168 bytes): __init__.py:87
    for k, v in kwargs.items():
2 memory blocks (168 bytes): TiffImagePlugin.py:1780
    fieldSizes = [
1 memory blocks (168 bytes): <frozen importlib._bootstrap_external>:1073
1 memory blocks (168 bytes): fromnumeric.py:285
    return _wrapfunc(a, 'reshape', newshape, order=order)
1 memory blocks (168 bytes): axis.py:199
    _api.check_in_list(['auto', 'default'], labelrotation=mode)
1 memory blocks (168 bytes): FastSlam.py:217
    with open(jsonFile, 'r') as f:
2 memory blocks (167 bytes): text.py:224
    def get_rotation(self):
2 memory blocks (166 bytes): artist.py:271
    @axes.setter
3 memory blocks (162 bytes): axis.py:1879
    axis = getattr(ax, f"{axis_name}axis")
2 memory blocks (162 bytes): artist.py:886
    def _set_gc_clip(self, gc):
2 memory blocks (160 bytes): __init__.py:2426
    ('pack', 'configure', self._w)
3 memory blocks (159 bytes): core.py:3524
    return self._mask.view()
2 memory blocks (158 bytes): lines.py:1034
    def set_drawstyle(self, drawstyle):
2 memory blocks (156 bytes): transforms.py:1900
    def __init__(self, matrix=None, **kwargs):
2 memory blocks (153 bytes): markers.py:266
    def _set_fillstyle(self, fillstyle):
2 memory blocks (148 bytes): text.py:826
    def get_unitless_position(self):
2 memory blocks (147 bytes): fromnumeric.py:3176
    @array_function_dispatch(_ndim_dispatcher)
2 memory blocks (144 bytes): transforms.py:170
    def invalidate(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:2017
    def _save_all(im, fp, filename):
1 memory blocks (144 bytes): TiffImagePlugin.py:1993
    def fixOffsets(self, count, isShort=False, isLong=False):
1 memory blocks (144 bytes): TiffImagePlugin.py:1958
    def fixIFD(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1954
    def close(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1949
    def writeLong(self, value):
1 memory blocks (144 bytes): TiffImagePlugin.py:1944
    def writeShort(self, value):
1 memory blocks (144 bytes): TiffImagePlugin.py:1938
    def rewriteLastLong(self, value):
1 memory blocks (144 bytes): TiffImagePlugin.py:1932
    def rewriteLastShort(self, value):
1 memory blocks (144 bytes): TiffImagePlugin.py:1926
    def rewriteLastShortToLong(self, value):
1 memory blocks (144 bytes): TiffImagePlugin.py:1922
    def readLong(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1918
    def readShort(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1915
    def write(self, data):
1 memory blocks (144 bytes): TiffImagePlugin.py:1904
    def skipIFDs(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1898
    def setEndian(self, endian):
1 memory blocks (144 bytes): TiffImagePlugin.py:1888
    def goToEnd(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1878
    def tell(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1873
    def __exit__(self, exc_type, exc_value, traceback):
1 memory blocks (144 bytes): TiffImagePlugin.py:1870
    def __enter__(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1865
    def newFrame(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1842
    def finalize(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1818
    def setup(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1804
    def __init__(self, fn, new=False):
1 memory blocks (144 bytes): TiffImagePlugin.py:1502
    def _save(im, fp, filename):
1 memory blocks (144 bytes): TiffImagePlugin.py:1460
    def _close__fp(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1252
    def _setup(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1167
    def _load_libtiff(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1136
    def load_end(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1123
    def getxmp(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1119
    def tell(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1083
    def _seek(self, frame):
1 memory blocks (144 bytes): TiffImagePlugin.py:1072
    def seek(self, frame):
1 memory blocks (144 bytes): TiffImagePlugin.py:1037
    def _open(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:1001
    def __getitem__(self, tag):
1 memory blocks (144 bytes): TiffImagePlugin.py:997
    def __setitem__(self, tag, value):
1 memory blocks (144 bytes): TiffImagePlugin.py:994
    def __iter__(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:991
    def __len__(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:988
    def __contains__(self, tag):
1 memory blocks (144 bytes): TiffImagePlugin.py:971
    def to_v2(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:901
    def save(self, fp):
1 memory blocks (144 bytes): TiffImagePlugin.py:825
    def tobytes(self, offset=0):
1 memory blocks (144 bytes): TiffImagePlugin.py:770
    def load(self, fp):
1 memory blocks (144 bytes): TiffImagePlugin.py:761
    def _ensure_read(self, fp, size):
1 memory blocks (144 bytes): TiffImagePlugin.py:742
    def write_undefined(self, value):
1 memory blocks (144 bytes): TiffImagePlugin.py:738
    def load_undefined(self, data, legacy_api=True):
1 memory blocks (144 bytes): TiffImagePlugin.py:732
    def write_rational(self, *values):
1 memory blocks (144 bytes): TiffImagePlugin.py:723
    def load_rational(self, data, legacy_api=True):
1 memory blocks (144 bytes): TiffImagePlugin.py:718
    def write_string(self, value):
1 memory blocks (144 bytes): TiffImagePlugin.py:712
    def load_string(self, data, legacy_api=True):
1 memory blocks (144 bytes): TiffImagePlugin.py:708
    def write_byte(self, data):
1 memory blocks (144 bytes): TiffImagePlugin.py:704
    def load_byte(self, data, legacy_api=True):
1 memory blocks (144 bytes): TiffImagePlugin.py:671
    def _register_basic(idx_fmt_name):
1 memory blocks (144 bytes): TiffImagePlugin.py:664
    def _register_writer(idx):
1 memory blocks (144 bytes): TiffImagePlugin.py:653
    def _register_loader(idx, size):
1 memory blocks (144 bytes): TiffImagePlugin.py:650
    def _pack(self, fmt, *values):
1 memory blocks (144 bytes): TiffImagePlugin.py:647
    def _unpack(self, fmt, data):
1 memory blocks (144 bytes): TiffImagePlugin.py:644
    def __iter__(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:639
    def __delitem__(self, tag):
1 memory blocks (144 bytes): TiffImagePlugin.py:559
    def _setitem(self, tag, value, legacy_api):
1 memory blocks (144 bytes): TiffImagePlugin.py:556
    def __setitem__(self, tag, value):
1 memory blocks (144 bytes): TiffImagePlugin.py:553
    def __contains__(self, tag):
1 memory blocks (144 bytes): TiffImagePlugin.py:542
    def __getitem__(self, tag):
1 memory blocks (144 bytes): TiffImagePlugin.py:539
    def __len__(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:528
    def named(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:525
    def __str__(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:517
    def reset(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:511
    legacy_api = property(lambda self: self._legacy_api)
1 memory blocks (144 bytes): TiffImagePlugin.py:482
    def __init__(self, ifh=b"II\052\0\0\0\0\0", prefix=None, group=None):
1 memory blocks (144 bytes): TiffImagePlugin.py:379
    def _delegate(op):
1 memory blocks (144 bytes): TiffImagePlugin.py:372
    def __setstate__(self, state):
1 memory blocks (144 bytes): TiffImagePlugin.py:369
    def __getstate__(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:361
    def __eq__(self, other):
1 memory blocks (144 bytes): TiffImagePlugin.py:358
    def __hash__(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:355
    def __repr__(self):
1 memory blocks (144 bytes): TiffImagePlugin.py:342
    def limit_rational(self, max_denominator):
1 memory blocks (144 bytes): TiffImagePlugin.py:308
    def __init__(self, value, denominator=1):
1 memory blocks (144 bytes): TiffImagePlugin.py:273
    def _limit_signed_rational(val, max_val, min_val):
1 memory blocks (144 bytes): TiffImagePlugin.py:267
    def _limit_rational(val, max_val):
1 memory blocks (144 bytes): TiffImagePlugin.py:263
    def _accept(prefix):
1 memory blocks (144 bytes): PpmImagePlugin.py:123
    def _save(im, fp, filename):
1 memory blocks (144 bytes): PpmImagePlugin.py:64
    def _open(self):
1 memory blocks (144 bytes): PpmImagePlugin.py:52
    def _token(self, s=b""):
1 memory blocks (144 bytes): PpmImagePlugin.py:39
    def _accept(prefix):
1 memory blocks (144 bytes): JpegImagePlugin.py:798
    def jpeg_factory(fp=None, filename=None):
1 memory blocks (144 bytes): JpegImagePlugin.py:786
    def _save_cjpeg(im, fp, filename):
1 memory blocks (144 bytes): JpegImagePlugin.py:627
    def _save(im, fp, filename):
1 memory blocks (144 bytes): JpegImagePlugin.py:613
    def get_sampling(im):
1 memory blocks (144 bytes): JpegImagePlugin.py:604
    def convert_dict_qtables(qtables):
1 memory blocks (144 bytes): JpegImagePlugin.py:502
    def _getmp(self):
1 memory blocks (144 bytes): JpegImagePlugin.py:496
    def _getexif(self):
1 memory blocks (144 bytes): JpegImagePlugin.py:481
    def getxmp(self):
1 memory blocks (144 bytes): JpegImagePlugin.py:478
    def _getmp(self):
1 memory blocks (144 bytes): JpegImagePlugin.py:475
    def _getexif(self):
1 memory blocks (144 bytes): JpegImagePlugin.py:449
    def load_djpeg(self):
1 memory blocks (144 bytes): JpegImagePlugin.py:412
    def draft(self, mode, size):
1 memory blocks (144 bytes): JpegImagePlugin.py:396
    def load_read(self, read_bytes):
1 memory blocks (144 bytes): JpegImagePlugin.py:345
    def _open(self):
1 memory blocks (144 bytes): JpegImagePlugin.py:331
    def _accept(prefix):
1 memory blocks (144 bytes): JpegImagePlugin.py:238
    def DQT(self, marker):
1 memory blocks (144 bytes): JpegImagePlugin.py:190
    def SOF(self, marker):
1 memory blocks (144 bytes): JpegImagePlugin.py:179
    def COM(self, marker):
1 memory blocks (144 bytes): JpegImagePlugin.py:59
    def APP(self, marker):
1 memory blocks (144 bytes): JpegImagePlugin.py:54
    def Skip(self, marker):
1 memory blocks (144 bytes): ImageOps.py:571
    def exif_transpose(image):
1 memory blocks (144 bytes): ImageOps.py:554
    def solarize(image, threshold=128):
1 memory blocks (144 bytes): ImageOps.py:539
    def posterize(image, bits):
1 memory blocks (144 bytes): ImageOps.py:529
    def mirror(image):
1 memory blocks (144 bytes): ImageOps.py:516
    def invert(image):
1 memory blocks (144 bytes): ImageOps.py:506
    def grayscale(image):
1 memory blocks (144 bytes): ImageOps.py:496
    def flip(image):
1 memory blocks (144 bytes): ImageOps.py:384
    def expand(image, border=0, fill=0):
1 memory blocks (144 bytes): ImageOps.py:353
    def equalize(image, mask=None):
1 memory blocks (144 bytes): ImageOps.py:303
    def crop(image, border=0):
1 memory blocks (144 bytes): ImageOps.py:156
    def colorize(image, black, white, mid=None, blackpoint=0, whitepoint=255, midpoint=127):
1 memory blocks (144 bytes): ImageOps.py:65
    def autocontrast(image, cutoff=0, ignore=None, mask=None, preserve_tone=False):
1 memory blocks (144 bytes): ImageOps.py:49
    def _lut(image, lut):
1 memory blocks (144 bytes): ImageOps.py:41
    def _color(color, mode):
1 memory blocks (144 bytes): ImageOps.py:30
    def _border(border):
1 memory blocks (144 bytes): GifImagePlugin.py:952
    def getdata(im, offset=(0, 0), **params):
1 memory blocks (144 bytes): GifImagePlugin.py:922
    def getheader(im, palette=None, info=None):
1 memory blocks (144 bytes): GifImagePlugin.py:902
    def _write_frame_data(fp, im_frame, offset, params):
1 memory blocks (144 bytes): GifImagePlugin.py:863
    def _get_global_header(im, info):
1 memory blocks (144 bytes): GifImagePlugin.py:843
    def _get_background(im, infoBackground):
1 memory blocks (144 bytes): GifImagePlugin.py:833
    def _get_palette_bytes(im):
1 memory blocks (144 bytes): GifImagePlugin.py:815
    def _get_header_palette(palette_bytes):
1 memory blocks (144 bytes): GifImagePlugin.py:805
    def _get_color_table_size(palette_bytes):
1 memory blocks (144 bytes): GifImagePlugin.py:768
    def _get_optimize(im, info):
1 memory blocks (144 bytes): GifImagePlugin.py:715
    def _save_netpbm(im, fp, filename):
1 memory blocks (144 bytes): GifImagePlugin.py:631
    def _write_local_header(fp, im, offset, flags):
1 memory blocks (144 bytes): GifImagePlugin.py:621
    def get_interlace(im):
1 memory blocks (144 bytes): GifImagePlugin.py:604
    def _save(im, fp, filename, save_all=False):
1 memory blocks (144 bytes): GifImagePlugin.py:600
    def _save_all(im, fp, filename):
1 memory blocks (144 bytes): GifImagePlugin.py:522
    def _write_multiple_frames(im, fp, palette):
1 memory blocks (144 bytes): GifImagePlugin.py:501
    def _write_single_frame(im, fp, palette):
1 memory blocks (144 bytes): GifImagePlugin.py:448
    def _normalize_palette(im, palette, info):
1 memory blocks (144 bytes): GifImagePlugin.py:412
    def _normalize_mode(im, initial_call=False):
1 memory blocks (144 bytes): GifImagePlugin.py:395
    def _close__fp(self):
1 memory blocks (144 bytes): GifImagePlugin.py:392
    def tell(self):
1 memory blocks (144 bytes): GifImagePlugin.py:375
    def load_end(self):
1 memory blocks (144 bytes): GifImagePlugin.py:138
    def _seek(self, frame):
1 memory blocks (144 bytes): GifImagePlugin.py:123
    def seek(self, frame):
1 memory blocks (144 bytes): GifImagePlugin.py:64
    def _open(self):
1 memory blocks (144 bytes): GifImagePlugin.py:58
    def data(self):
1 memory blocks (144 bytes): GifImagePlugin.py:41
    def _accept(prefix):
1 memory blocks (144 bytes): BmpImagePlugin.py:304
    def _save(im, fp, filename, bitmap_header=True):
1 memory blocks (144 bytes): BmpImagePlugin.py:300
    def _dib_save(im, fp, filename):
1 memory blocks (144 bytes): BmpImagePlugin.py:282
    def _open(self):
1 memory blocks (144 bytes): BmpImagePlugin.py:261
    def _open(self):
1 memory blocks (144 bytes): BmpImagePlugin.py:72
    def _bitmap(self, header=0, offset=0):
1 memory blocks (144 bytes): BmpImagePlugin.py:53
    def _dib_accept(prefix):
1 memory blocks (144 bytes): BmpImagePlugin.py:49
    def _accept(prefix):
1 memory blocks (144 bytes): fractions.py:745
    def __deepcopy__(self, memo):
1 memory blocks (144 bytes): fractions.py:740
    def __copy__(self):
1 memory blocks (144 bytes): fractions.py:737
    def __reduce__(self):
1 memory blocks (144 bytes): fractions.py:729
    def __bool__(a):
1 memory blocks (144 bytes): fractions.py:725
    def __ge__(a, b):
1 memory blocks (144 bytes): fractions.py:721
    def __le__(a, b):
1 memory blocks (144 bytes): fractions.py:717
    def __gt__(a, b):
1 memory blocks (144 bytes): fractions.py:713
    def __lt__(a, b):
1 memory blocks (144 bytes): fractions.py:691
    def _richcmp(self, other, op):
1 memory blocks (144 bytes): fractions.py:670
    def __eq__(a, b):
1 memory blocks (144 bytes): fractions.py:637
    def __hash__(self):
1 memory blocks (144 bytes): fractions.py:612
    def __round__(self, ndigits=None):
1 memory blocks (144 bytes): fractions.py:607
    def __ceil__(a):
1 memory blocks (144 bytes): fractions.py:603
    def __floor__(a):
1 memory blocks (144 bytes): fractions.py:596
    def __trunc__(a):
1 memory blocks (144 bytes): fractions.py:592
    def __abs__(a):
1 memory blocks (144 bytes): fractions.py:588
    def __neg__(a):
1 memory blocks (144 bytes): fractions.py:584
    def __pos__(a):
1 memory blocks (144 bytes): fractions.py:570
    def __rpow__(b, a):
1 memory blocks (144 bytes): fractions.py:540
    def __pow__(a, b):
1 memory blocks (144 bytes): fractions.py:533
    def _mod(a, b):
1 memory blocks (144 bytes): fractions.py:525
    def _divmod(a, b):
1 memory blocks (144 bytes): fractions.py:519
    def _floordiv(a, b):
1 memory blocks (144 bytes): fractions.py:499
    def _div(a, b):
1 memory blocks (144 bytes): fractions.py:483
    def _mul(a, b):
1 memory blocks (144 bytes): fractions.py:467
    def _sub(a, b):
1 memory blocks (144 bytes): fractions.py:451
    def _add(a, b):
1 memory blocks (144 bytes): fractions.py:276
    def _operator_fallbacks(monomorphic_operator, fallback_operator):
1 memory blocks (144 bytes): fractions.py:269
    def __str__(self):
1 memory blocks (144 bytes): fractions.py:264
    def __repr__(self):
1 memory blocks (144 bytes): fractions.py:201
    def limit_denominator(self, max_denominator=1000000):
1 memory blocks (144 bytes): fractions.py:193
    def as_integer_ratio(self):
1 memory blocks (144 bytes): FastSlam.py:222
    def main():
1 memory blocks (144 bytes): FastSlam.py:216
    def readJson(jsonFile):
1 memory blocks (144 bytes): FastSlam.py:154
    def plotParticle(self):
1 memory blocks (144 bytes): FastSlam.py:149
    def updateTrajectory(self, matchedReading):
1 memory blocks (144 bytes): FastSlam.py:134
    def update(self, reading, count):
1 memory blocks (144 bytes): FastSlam.py:120
    def getMovingTheta(self, matchedReading):
1 memory blocks (144 bytes): FastSlam.py:89
    def updateEstimatedPose(self, currentRawReading):
1 memory blocks (144 bytes): FastSlam.py:77
    def __init__(self, ogParameters, smParameters):
1 memory blocks (144 bytes): FastSlam.py:62
    def resample(self):
1 memory blocks (144 bytes): FastSlam.py:55
    def normalizeWeights(self):
1 memory blocks (144 bytes): FastSlam.py:42
    def weightUnbalanced(self):
1 memory blocks (144 bytes): FastSlam.py:37
    def updateParticles(self, reading, count):
1 memory blocks (144 bytes): FastSlam.py:32
    def initParticles(self, ogParameters, smParameters):
1 memory blocks (144 bytes): FastSlam.py:23
    def __init__(self, numParticles, ogParameters, smParameters):
2 memory blocks (143 bytes): backend_bases.py:906
    def set_clip_path(self, path):
2 memory blocks (143 bytes): axis.py:562
    @formatter.setter
2 memory blocks (143 bytes): axis.py:551
    @locator.setter
2 memory blocks (140 bytes): transforms.py:1348
    def __add__(self, other):
2 memory blocks (139 bytes): __init__.py:101
    def check_in_list(_values, *, _print_supported_values=True, **kwargs):
2 memory blocks (138 bytes): artist.py:1166
    @contextlib.contextmanager
2 memory blocks (136 bytes): transforms.py:2218
    is_affine = property(lambda self: self._x.is_affine and self._y.is_affine)
2 memory blocks (136 bytes): tracemalloc.py:551
    def take_snapshot():
4 memory blocks (128 bytes): function_base.py:5522
    new[tuple(slobj)] = arr[tuple(slobj)]
2 memory blocks (128 bytes): threading.py:604
    with self._cond:
1 memory blocks (128 bytes): FastSlam.py:35
    self.particles.append(p)
2 memory blocks (127 bytes): arraysetops.py:310
    def reshape_uniq(uniq):
2 memory blocks (121 bytes): __init__.py:872
    def get_siblings(self, a):
2 memory blocks (121 bytes): backend_agg.py:299
    def _get_agg_font(self, prop):
2 memory blocks (120 bytes): colors.py:111
    def is_color_like(c):
2 memory blocks (120 bytes): FastSlam.py:231
    smParameters = [scanMatchSearchRadius, scanMatchSearchHalfRad, scanSigmaInNumGrid, moveRSigma, maxMoveDeviation, turnSigma, \
2 memory blocks (120 bytes): FastSlam.py:230
    ogParameters = [initMapXLength, initMapYLength, initXY, unitGridSize, lidarFOV, lidarMaxRange, numSamplesPerRev, wallThickness]
2 memory blocks (119 bytes): artist.py:254
    def convert_yunits(self, y):
2 memory blocks (119 bytes): artist.py:242
    def convert_xunits(self, x):
2 memory blocks (118 bytes): spines.py:549
    def __getattr__(self, name):
2 memory blocks (118 bytes): font_manager.py:817
    def set_variant(self, variant):
2 memory blocks (118 bytes): font_manager.py:807
    def set_style(self, style):
2 memory blocks (118 bytes): ScanMatcher_OGBased.py:138
    maxIdx = np.random.choice(np.arange(convTotalFlatten.size), 1, p=convTotalFlattenProb)[0]
2 memory blocks (117 bytes): transforms.py:822
    @staticmethod
2 memory blocks (117 bytes): text.py:1265
    def set_usetex(self, usetex):
2 memory blocks (116 bytes): __init__.py:1455
    def debug(self, msg, *args, **kwargs):
2 memory blocks (114 bytes): _internal.py:525
    def _view_is_safe(oldtype, newtype):
2 memory blocks (114 bytes): lines.py:492
    def set_pickradius(self, d):
2 memory blocks (112 bytes): cycler.py:386
    out = {k: list() for k in keys}
2 memory blocks (112 bytes): font_manager.py:943
    def copy(self):
2 memory blocks (112 bytes): axis.py:151
    [], [],
2 memory blocks (112 bytes): pathlib.py:69
    for x in reversed(rel.split(sep)):
2 memory blocks (110 bytes): fromnumeric.py:2979
    @array_function_dispatch(_prod_dispatcher)
2 memory blocks (110 bytes): fromnumeric.py:2836
    @array_function_dispatch(_min_dispatcher)
2 memory blocks (110 bytes): fromnumeric.py:2692
    @array_function_dispatch(_max_dispatcher)
2 memory blocks (109 bytes): shape_base.py:207
    def _arrays_for_stack_dispatcher(arrays):
2 memory blocks (107 bytes): colors.py:106
    def _is_nth_color(c):
2 memory blocks (106 bytes): image.py:484
    a_max = a_max.astype(scaled_dtype).item()
2 memory blocks (105 bytes): axis.py:1985
    def getter(self):
2 memory blocks (105 bytes): Image.py:3162
    SAVE_ALL[id.upper()] = driver
2 memory blocks (104 bytes): <frozen importlib._bootstrap_external>:1164
2 memory blocks (104 bytes): pathlib.py:239
    def splitroot(self, part, sep=sep):
2 memory blocks (101 bytes): path.py:144
    codes = np.empty(len(vertices), dtype=self.code_type)
2 memory blocks (100 bytes): stride_tricks.py:480
    @array_function_dispatch(_broadcast_arrays_dispatcher, module='numpy')
3 memory blocks (99 bytes): artist.py:832
    def get_animated(self):
2 memory blocks (96 bytes): font_manager.py:710
    def __hash__(self):
2 memory blocks (94 bytes): transforms.py:2678
    def __init__(self, xt, yt, scale_trans, **kwargs):
2 memory blocks (90 bytes): PngImagePlugin.py:1353
    if cid[1:2].islower():
2 memory blocks (88 bytes): transforms.py:2044
    def translate(self, tx, ty):
2 memory blocks (88 bytes): colors.py:124
    def _check_color_like(**kwargs):
2 memory blocks (88 bytes): TiffImagePlugin.py:255
    PREFIXES = [
2 memory blocks (88 bytes): fractions.py:38
    class Fraction(numbers.Rational):
2 memory blocks (88 bytes): FastSlam.py:200
    ogMap = ogMap[yIdx[0]: yIdx[1], xIdx[0]: xIdx[1]]
1 memory blocks (88 bytes): TiffImagePlugin.py:1498
    "F;32BF": ("F;32BF", MM, 1, 3, (32,), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1497
    "I;16BS": ("I;16BS", MM, 1, 2, (16,), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1496
    "I;16B": ("I;16B", MM, 1, 1, (16,), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1495
    "I;32BS": ("I;32BS", MM, 1, 2, (32,), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1494
    "LAB": ("LAB", II, 8, 1, (8, 8, 8), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1493
    "YCbCr": ("YCbCr", II, 6, 1, (8, 8, 8), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1492
    "CMYK": ("CMYK", II, 5, 1, (8, 8, 8, 8), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1491
    "RGBA": ("RGBA", II, 2, 1, (8, 8, 8, 8), 2),
1 memory blocks (88 bytes): TiffImagePlugin.py:1490
    "RGBX": ("RGBX", II, 2, 1, (8, 8, 8, 8), 0),
1 memory blocks (88 bytes): TiffImagePlugin.py:1489
    "RGB": ("RGB", II, 2, 1, (8, 8, 8), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1488
    "F": ("F;32F", II, 1, 3, (32,), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1487
    "I;16S": ("I;16S", II, 1, 2, (16,), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1486
    "I;16": ("I;16", II, 1, 1, (16,), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1485
    "I": ("I;32S", II, 1, 2, (32,), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1484
    "PA": ("PA", II, 3, 1, (8, 8), 2),
1 memory blocks (88 bytes): TiffImagePlugin.py:1483
    "P": ("P", II, 3, 1, (8,), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1482
    "LA": ("LA", II, 1, 1, (8, 8), 2),
1 memory blocks (88 bytes): TiffImagePlugin.py:1481
    "L": ("L", II, 1, 1, (8,), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:1480
    "1": ("1", II, 1, 1, (1,), None),
1 memory blocks (88 bytes): TiffImagePlugin.py:252
    (MM, 8, (1,), 1, (8, 8, 8), ()): ("LAB", "LAB"),
1 memory blocks (88 bytes): TiffImagePlugin.py:251
    (II, 8, (1,), 1, (8, 8, 8), ()): ("LAB", "LAB"),
1 memory blocks (88 bytes): TiffImagePlugin.py:250
    (MM, 6, (1,), 1, (8, 8, 8), ()): ("RGB", "RGBX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:249
    (II, 6, (1,), 1, (8, 8, 8), ()): ("RGB", "RGBX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:246
    (II, 5, (1,), 1, (16, 16, 16, 16), ()): ("CMYK", "CMYK;16L"),
1 memory blocks (88 bytes): TiffImagePlugin.py:245
    (MM, 5, (1,), 1, (8, 8, 8, 8, 8, 8), (0, 0)): ("CMYK", "CMYKXX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:244
    (II, 5, (1,), 1, (8, 8, 8, 8, 8, 8), (0, 0)): ("CMYK", "CMYKXX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:243
    (MM, 5, (1,), 1, (8, 8, 8, 8, 8), (0,)): ("CMYK", "CMYKX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:242
    (II, 5, (1,), 1, (8, 8, 8, 8, 8), (0,)): ("CMYK", "CMYKX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:241
    (MM, 5, (1,), 1, (8, 8, 8, 8), ()): ("CMYK", "CMYK"),
1 memory blocks (88 bytes): TiffImagePlugin.py:240
    (II, 5, (1,), 1, (8, 8, 8, 8), ()): ("CMYK", "CMYK"),
1 memory blocks (88 bytes): TiffImagePlugin.py:239
    (MM, 3, (1,), 2, (8,), ()): ("P", "P;R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:238
    (II, 3, (1,), 2, (8,), ()): ("P", "P;R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:237
    (MM, 3, (1,), 1, (8, 8), (2,)): ("PA", "PA"),
1 memory blocks (88 bytes): TiffImagePlugin.py:236
    (II, 3, (1,), 1, (8, 8), (2,)): ("PA", "PA"),
1 memory blocks (88 bytes): TiffImagePlugin.py:235
    (MM, 3, (1,), 1, (8,), ()): ("P", "P"),
1 memory blocks (88 bytes): TiffImagePlugin.py:234
    (II, 3, (1,), 1, (8,), ()): ("P", "P"),
1 memory blocks (88 bytes): TiffImagePlugin.py:233
    (MM, 3, (1,), 2, (4,), ()): ("P", "P;4R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:232
    (II, 3, (1,), 2, (4,), ()): ("P", "P;4R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:231
    (MM, 3, (1,), 1, (4,), ()): ("P", "P;4"),
1 memory blocks (88 bytes): TiffImagePlugin.py:230
    (II, 3, (1,), 1, (4,), ()): ("P", "P;4"),
1 memory blocks (88 bytes): TiffImagePlugin.py:229
    (MM, 3, (1,), 2, (2,), ()): ("P", "P;2R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:228
    (II, 3, (1,), 2, (2,), ()): ("P", "P;2R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:227
    (MM, 3, (1,), 1, (2,), ()): ("P", "P;2"),
1 memory blocks (88 bytes): TiffImagePlugin.py:226
    (II, 3, (1,), 1, (2,), ()): ("P", "P;2"),
1 memory blocks (88 bytes): TiffImagePlugin.py:225
    (MM, 3, (1,), 2, (1,), ()): ("P", "P;1R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:224
    (II, 3, (1,), 2, (1,), ()): ("P", "P;1R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:223
    (MM, 3, (1,), 1, (1,), ()): ("P", "P;1"),
1 memory blocks (88 bytes): TiffImagePlugin.py:222
    (II, 3, (1,), 1, (1,), ()): ("P", "P;1"),
1 memory blocks (88 bytes): TiffImagePlugin.py:221
    (MM, 2, (1,), 1, (16, 16, 16, 16), (2,)): ("RGBA", "RGBA;16B"),
1 memory blocks (88 bytes): TiffImagePlugin.py:220
    (II, 2, (1,), 1, (16, 16, 16, 16), (2,)): ("RGBA", "RGBA;16L"),
1 memory blocks (88 bytes): TiffImagePlugin.py:219
    (MM, 2, (1,), 1, (16, 16, 16, 16), (1,)): ("RGBA", "RGBa;16B"),
1 memory blocks (88 bytes): TiffImagePlugin.py:218
    (II, 2, (1,), 1, (16, 16, 16, 16), (1,)): ("RGBA", "RGBa;16L"),
1 memory blocks (88 bytes): TiffImagePlugin.py:217
    (MM, 2, (1,), 1, (16, 16, 16, 16), (0,)): ("RGBX", "RGBX;16B"),
1 memory blocks (88 bytes): TiffImagePlugin.py:216
    (II, 2, (1,), 1, (16, 16, 16, 16), (0,)): ("RGBX", "RGBX;16L"),
1 memory blocks (88 bytes): TiffImagePlugin.py:215
    (MM, 2, (1,), 1, (16, 16, 16, 16), ()): ("RGBA", "RGBA;16B"),
1 memory blocks (88 bytes): TiffImagePlugin.py:214
    (II, 2, (1,), 1, (16, 16, 16, 16), ()): ("RGBA", "RGBA;16L"),
1 memory blocks (88 bytes): TiffImagePlugin.py:213
    (MM, 2, (1,), 1, (16, 16, 16), ()): ("RGB", "RGB;16B"),
1 memory blocks (88 bytes): TiffImagePlugin.py:212
    (II, 2, (1,), 1, (16, 16, 16), ()): ("RGB", "RGB;16L"),
1 memory blocks (88 bytes): TiffImagePlugin.py:211
    (MM, 2, (1,), 1, (8, 8, 8, 8), (999,)): ("RGBA", "RGBA"),  # Corel Draw 10
1 memory blocks (88 bytes): TiffImagePlugin.py:210
    (II, 2, (1,), 1, (8, 8, 8, 8), (999,)): ("RGBA", "RGBA"),  # Corel Draw 10
1 memory blocks (88 bytes): TiffImagePlugin.py:209
    (MM, 2, (1,), 1, (8, 8, 8, 8, 8, 8), (2, 0, 0)): ("RGBA", "RGBAXX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:208
    (II, 2, (1,), 1, (8, 8, 8, 8, 8, 8), (2, 0, 0)): ("RGBA", "RGBAXX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:207
    (MM, 2, (1,), 1, (8, 8, 8, 8, 8), (2, 0)): ("RGBA", "RGBAX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:206
    (II, 2, (1,), 1, (8, 8, 8, 8, 8), (2, 0)): ("RGBA", "RGBAX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:205
    (MM, 2, (1,), 1, (8, 8, 8, 8), (2,)): ("RGBA", "RGBA"),
1 memory blocks (88 bytes): TiffImagePlugin.py:204
    (II, 2, (1,), 1, (8, 8, 8, 8), (2,)): ("RGBA", "RGBA"),
1 memory blocks (88 bytes): TiffImagePlugin.py:203
    (MM, 2, (1,), 1, (8, 8, 8, 8, 8, 8), (1, 0, 0)): ("RGBA", "RGBaXX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:202
    (II, 2, (1,), 1, (8, 8, 8, 8, 8, 8), (1, 0, 0)): ("RGBA", "RGBaXX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:201
    (MM, 2, (1,), 1, (8, 8, 8, 8, 8), (1, 0)): ("RGBA", "RGBaX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:200
    (II, 2, (1,), 1, (8, 8, 8, 8, 8), (1, 0)): ("RGBA", "RGBaX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:199
    (MM, 2, (1,), 1, (8, 8, 8, 8), (1,)): ("RGBA", "RGBa"),
1 memory blocks (88 bytes): TiffImagePlugin.py:198
    (II, 2, (1,), 1, (8, 8, 8, 8), (1,)): ("RGBA", "RGBa"),
1 memory blocks (88 bytes): TiffImagePlugin.py:197
    (MM, 2, (1,), 1, (8, 8, 8, 8, 8, 8), (0, 0, 0)): ("RGBX", "RGBXXX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:196
    (II, 2, (1,), 1, (8, 8, 8, 8, 8, 8), (0, 0, 0)): ("RGBX", "RGBXXX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:195
    (MM, 2, (1,), 1, (8, 8, 8, 8, 8), (0, 0)): ("RGBX", "RGBXX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:194
    (II, 2, (1,), 1, (8, 8, 8, 8, 8), (0, 0)): ("RGBX", "RGBXX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:193
    (MM, 2, (1,), 1, (8, 8, 8, 8), (0,)): ("RGBX", "RGBX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:192
    (II, 2, (1,), 1, (8, 8, 8, 8), (0,)): ("RGBX", "RGBX"),
1 memory blocks (88 bytes): TiffImagePlugin.py:191
    (MM, 2, (1,), 1, (8, 8, 8, 8), ()): ("RGBA", "RGBA"),  # missing ExtraSamples
1 memory blocks (88 bytes): TiffImagePlugin.py:190
    (II, 2, (1,), 1, (8, 8, 8, 8), ()): ("RGBA", "RGBA"),  # missing ExtraSamples
1 memory blocks (88 bytes): TiffImagePlugin.py:189
    (MM, 2, (1,), 2, (8, 8, 8), ()): ("RGB", "RGB;R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:188
    (II, 2, (1,), 2, (8, 8, 8), ()): ("RGB", "RGB;R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:187
    (MM, 2, (1,), 1, (8, 8, 8), ()): ("RGB", "RGB"),
1 memory blocks (88 bytes): TiffImagePlugin.py:186
    (II, 2, (1,), 1, (8, 8, 8), ()): ("RGB", "RGB"),
1 memory blocks (88 bytes): TiffImagePlugin.py:185
    (MM, 1, (1,), 1, (8, 8), (2,)): ("LA", "LA"),
1 memory blocks (88 bytes): TiffImagePlugin.py:184
    (II, 1, (1,), 1, (8, 8), (2,)): ("LA", "LA"),
1 memory blocks (88 bytes): TiffImagePlugin.py:183
    (MM, 1, (3,), 1, (32,), ()): ("F", "F;32BF"),
1 memory blocks (88 bytes): TiffImagePlugin.py:182
    (II, 1, (3,), 1, (32,), ()): ("F", "F;32F"),
1 memory blocks (88 bytes): TiffImagePlugin.py:181
    (MM, 1, (2,), 1, (32,), ()): ("I", "I;32BS"),
1 memory blocks (88 bytes): TiffImagePlugin.py:180
    (II, 1, (2,), 1, (32,), ()): ("I", "I;32S"),
1 memory blocks (88 bytes): TiffImagePlugin.py:179
    (II, 1, (1,), 1, (32,), ()): ("I", "I;32N"),
1 memory blocks (88 bytes): TiffImagePlugin.py:178
    (MM, 0, (3,), 1, (32,), ()): ("F", "F;32BF"),
1 memory blocks (88 bytes): TiffImagePlugin.py:177
    (II, 0, (3,), 1, (32,), ()): ("F", "F;32F"),
1 memory blocks (88 bytes): TiffImagePlugin.py:176
    (MM, 1, (2,), 1, (16,), ()): ("I", "I;16BS"),
1 memory blocks (88 bytes): TiffImagePlugin.py:175
    (II, 1, (2,), 1, (16,), ()): ("I", "I;16S"),
1 memory blocks (88 bytes): TiffImagePlugin.py:174
    (MM, 1, (1,), 1, (16,), ()): ("I;16B", "I;16B"),
1 memory blocks (88 bytes): TiffImagePlugin.py:173
    (II, 1, (1,), 1, (16,), ()): ("I;16", "I;16"),
1 memory blocks (88 bytes): TiffImagePlugin.py:172
    (II, 1, (1,), 1, (12,), ()): ("I;16", "I;12"),
1 memory blocks (88 bytes): TiffImagePlugin.py:171
    (MM, 1, (1,), 2, (8,), ()): ("L", "L;R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:170
    (II, 1, (1,), 2, (8,), ()): ("L", "L;R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:169
    (MM, 1, (1,), 1, (8,), ()): ("L", "L"),
1 memory blocks (88 bytes): TiffImagePlugin.py:168
    (II, 1, (1,), 1, (8,), ()): ("L", "L"),
1 memory blocks (88 bytes): TiffImagePlugin.py:167
    (MM, 0, (1,), 2, (8,), ()): ("L", "L;IR"),
1 memory blocks (88 bytes): TiffImagePlugin.py:166
    (II, 0, (1,), 2, (8,), ()): ("L", "L;IR"),
1 memory blocks (88 bytes): TiffImagePlugin.py:165
    (MM, 0, (1,), 1, (8,), ()): ("L", "L;I"),
1 memory blocks (88 bytes): TiffImagePlugin.py:164
    (II, 0, (1,), 1, (8,), ()): ("L", "L;I"),
1 memory blocks (88 bytes): TiffImagePlugin.py:163
    (MM, 1, (1,), 2, (4,), ()): ("L", "L;4R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:162
    (II, 1, (1,), 2, (4,), ()): ("L", "L;4R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:161
    (MM, 1, (1,), 1, (4,), ()): ("L", "L;4"),
1 memory blocks (88 bytes): TiffImagePlugin.py:160
    (II, 1, (1,), 1, (4,), ()): ("L", "L;4"),
1 memory blocks (88 bytes): TiffImagePlugin.py:159
    (MM, 0, (1,), 2, (4,), ()): ("L", "L;4IR"),
1 memory blocks (88 bytes): TiffImagePlugin.py:158
    (II, 0, (1,), 2, (4,), ()): ("L", "L;4IR"),
1 memory blocks (88 bytes): TiffImagePlugin.py:157
    (MM, 0, (1,), 1, (4,), ()): ("L", "L;4I"),
1 memory blocks (88 bytes): TiffImagePlugin.py:156
    (II, 0, (1,), 1, (4,), ()): ("L", "L;4I"),
1 memory blocks (88 bytes): TiffImagePlugin.py:155
    (MM, 1, (1,), 2, (2,), ()): ("L", "L;2R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:154
    (II, 1, (1,), 2, (2,), ()): ("L", "L;2R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:153
    (MM, 1, (1,), 1, (2,), ()): ("L", "L;2"),
1 memory blocks (88 bytes): TiffImagePlugin.py:152
    (II, 1, (1,), 1, (2,), ()): ("L", "L;2"),
1 memory blocks (88 bytes): TiffImagePlugin.py:151
    (MM, 0, (1,), 2, (2,), ()): ("L", "L;2IR"),
1 memory blocks (88 bytes): TiffImagePlugin.py:150
    (II, 0, (1,), 2, (2,), ()): ("L", "L;2IR"),
1 memory blocks (88 bytes): TiffImagePlugin.py:149
    (MM, 0, (1,), 1, (2,), ()): ("L", "L;2I"),
1 memory blocks (88 bytes): TiffImagePlugin.py:148
    (II, 0, (1,), 1, (2,), ()): ("L", "L;2I"),
1 memory blocks (88 bytes): TiffImagePlugin.py:147
    (MM, 1, (1,), 2, (1,), ()): ("1", "1;R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:146
    (II, 1, (1,), 2, (1,), ()): ("1", "1;R"),
1 memory blocks (88 bytes): TiffImagePlugin.py:145
    (MM, 1, (1,), 1, (1,), ()): ("1", "1"),
1 memory blocks (88 bytes): TiffImagePlugin.py:144
    (II, 1, (1,), 1, (1,), ()): ("1", "1"),
1 memory blocks (88 bytes): TiffImagePlugin.py:143
    (MM, 0, (1,), 2, (1,), ()): ("1", "1;IR"),
1 memory blocks (88 bytes): TiffImagePlugin.py:142
    (II, 0, (1,), 2, (1,), ()): ("1", "1;IR"),
1 memory blocks (88 bytes): TiffImagePlugin.py:141
    (MM, 0, (1,), 1, (1,), ()): ("1", "1;I"),
1 memory blocks (88 bytes): TiffImagePlugin.py:140
    (II, 0, (1,), 1, (1,), ()): ("1", "1;I"),
1 memory blocks (88 bytes): __init__.py:1520
    res = res + ('-'+k, v)
1 memory blocks (88 bytes): sre_compile.py:807
    groupindex, tuple(indexgroup)
2 memory blocks (87 bytes): text.py:1209
    def set_text(self, s):
2 memory blocks (86 bytes): ScanMatcher_OGBased.py:173
    def convertXYToSearchSpaceIdx(self, px, py, beginX, beginY, unitLength):
2 memory blocks (85 bytes): lines.py:1193
    def set_markeredgewidth(self, ew):
2 memory blocks (84 bytes): __init__.py:184
    def __init__(self, exception_handler=_exception_printer):
2 memory blocks (84 bytes): artist.py:1096
    def set_zorder(self, level):
2 memory blocks (83 bytes): ticker.py:542
    def _format_maybe_minus_and_locale(self, fmt, arg):
2 memory blocks (82 bytes): function_base.py:348
    @set_module('numpy')
2 memory blocks (82 bytes): spines.py:200
    def _ensure_position_is_set(self):
2 memory blocks (81 bytes): numerictypes.py:283
    @set_module('numpy')
2 memory blocks (81 bytes): text.py:1195
    def set_verticalalignment(self, align):
2 memory blocks (81 bytes): text.py:957
    def set_horizontalalignment(self, align):
2 memory blocks (81 bytes): text.py:241
    def set_rotation_mode(self, m):
2 memory blocks (81 bytes): lines.py:1349
    @docstring.interpd
2 memory blocks (81 bytes): lines.py:1335
    @docstring.interpd
2 memory blocks (81 bytes): lines.py:1305
    @docstring.interpd
2 memory blocks (81 bytes): lines.py:1291
    @docstring.interpd
2 memory blocks (81 bytes): lines.py:1208
    def set_markersize(self, sz):
2 memory blocks (80 bytes): fractions.py:531
    __divmod__, __rdivmod__ = _operator_fallbacks(_divmod, divmod)
2 memory blocks (80 bytes): fractions.py:523
    __floordiv__, __rfloordiv__ = _operator_fallbacks(_floordiv, operator.floordiv)
2 memory blocks (80 bytes): fractions.py:517
    __truediv__, __rtruediv__ = _operator_fallbacks(_div, operator.truediv)
2 memory blocks (80 bytes): fractions.py:497
    __mul__, __rmul__ = _operator_fallbacks(_mul, operator.mul)
2 memory blocks (80 bytes): fractions.py:481
    __sub__, __rsub__ = _operator_fallbacks(_sub, operator.sub)
2 memory blocks (80 bytes): fractions.py:465
    __add__, __radd__ = _operator_fallbacks(_add, operator.add)
2 memory blocks (79 bytes): font_manager.py:794
    def set_family(self, family):
2 memory blocks (79 bytes): threading.py:279
    def _is_owned(self):
2 memory blocks (78 bytes): _ni_support.py:37
    def _extend_mode_to_code(mode):
2 memory blocks (78 bytes): stride_tricks.py:538
    args = [np.array(_m, copy=False, subok=subok) for _m in args]
2 memory blocks (78 bytes): transforms.py:1783
    def __init__(self, *args, **kwargs):
2 memory blocks (78 bytes): lines.py:1135
    @docstring.interpd
2 memory blocks (78 bytes): lines.py:1022
    def set_color(self, color):
2 memory blocks (77 bytes): ticker.py:253
    @staticmethod
2 memory blocks (76 bytes): transforms.py:1940
    def get_matrix(self):
2 memory blocks (75 bytes): figure.py:46
    def _stale_figure_callback(self, val):
2 memory blocks (75 bytes): __init__.py:1810
    def _str_lower_equal(obj, s):
2 memory blocks (75 bytes): artist.py:81
    def _stale_axes_callback(self, val):
2 memory blocks (74 bytes): font_manager.py:1022
    def _normalize_font_family(family):
2 memory blocks (73 bytes): transforms.py:637
    def translated(self, tx, ty):
2 memory blocks (73 bytes): __init__.py:1799
    def _str_equal(obj, s):
2 memory blocks (72 bytes): font_manager.py:721
    def __eq__(self, other):
2 memory blocks (72 bytes): JpegPresets.py:221
    'quantization': [
2 memory blocks (72 bytes): JpegPresets.py:202
    'quantization': [
2 memory blocks (72 bytes): JpegPresets.py:183
    'quantization': [
2 memory blocks (72 bytes): JpegPresets.py:164
    'quantization': [
2 memory blocks (72 bytes): JpegPresets.py:145
    'quantization': [
2 memory blocks (72 bytes): JpegPresets.py:126
    'quantization': [
2 memory blocks (72 bytes): JpegPresets.py:107
    'quantization': [
2 memory blocks (72 bytes): JpegPresets.py:88
    'quantization': [
2 memory blocks (72 bytes): JpegPresets.py:69
    'quantization': [
2 memory blocks (71 bytes): text.py:1227
    def _preprocess_math(self, s):
2 memory blocks (70 bytes): threading.py:267
    def __exit__(self, *args):
2 memory blocks (69 bytes): queue.py:209
    def _qsize(self):
2 memory blocks (68 bytes): core.py:3417
    @property
2 memory blocks (68 bytes): transforms.py:1772
    is_affine = property(lambda self: self._child.is_affine)
2 memory blocks (64 bytes): fractions.py:13
    __all__ = ['Fraction']
1 memory blocks (64 bytes): <frozen importlib._bootstrap>:1010
1 memory blocks (64 bytes): transforms.py:774
    super().__init__(**kwargs)
1 memory blocks (64 bytes): image.py:1655
    metadata = {
1 memory blocks (64 bytes): image.py:1643
    pil_kwargs = {}
1 memory blocks (64 bytes): cm.py:355
    self._A = None
1 memory blocks (64 bytes): __init__.py:1734
    ret = {}  # output dictionary
1 memory blocks (64 bytes): __init__.py:1728
    alias_mapping = getattr(alias_mapping, "_alias_map", {})
1 memory blocks (64 bytes): backend_bases.py:2275
    color = locals()[prop]
1 memory blocks (64 bytes): TiffImagePlugin.py:291
    _write_dispatch = {}
1 memory blocks (64 bytes): TiffImagePlugin.py:290
    _load_dispatch = {}
1 memory blocks (64 bytes): PngImagePlugin.py:1040
    self.fp = fp
1 memory blocks (64 bytes): PngImagePlugin.py:266
    self.chunks = []
1 memory blocks (64 bytes): JpegPresets.py:87
    'web_medium':   {'subsampling':  2,  # "4:2:0"
1 memory blocks (64 bytes): JpegPresets.py:68
    'web_low':      {'subsampling':  2,  # "4:2:0"
1 memory blocks (64 bytes): JpegImagePlugin.py:596
    samplings = {
1 memory blocks (64 bytes): JpegImagePlugin.py:327
    0xFFFE: ("COM", "Comment", COM),
1 memory blocks (64 bytes): JpegImagePlugin.py:312
    0xFFEF: ("APP15", "Application segment 15", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:311
    0xFFEE: ("APP14", "Application segment 14", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:310
    0xFFED: ("APP13", "Application segment 13", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:309
    0xFFEC: ("APP12", "Application segment 12", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:308
    0xFFEB: ("APP11", "Application segment 11", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:307
    0xFFEA: ("APP10", "Application segment 10", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:306
    0xFFE9: ("APP9", "Application segment 9", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:305
    0xFFE8: ("APP8", "Application segment 8", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:304
    0xFFE7: ("APP7", "Application segment 7", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:303
    0xFFE6: ("APP6", "Application segment 6", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:302
    0xFFE5: ("APP5", "Application segment 5", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:301
    0xFFE4: ("APP4", "Application segment 4", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:300
    0xFFE3: ("APP3", "Application segment 3", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:299
    0xFFE2: ("APP2", "Application segment 2", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:298
    0xFFE1: ("APP1", "Application segment 1", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:297
    0xFFE0: ("APP0", "Application segment 0", APP),
1 memory blocks (64 bytes): JpegImagePlugin.py:296
    0xFFDF: ("EXP", "Expand reference component", Skip),
1 memory blocks (64 bytes): JpegImagePlugin.py:295
    0xFFDE: ("DHP", "Define hierarchical progression", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:294
    0xFFDD: ("DRI", "Define restart interval", Skip),
1 memory blocks (64 bytes): JpegImagePlugin.py:293
    0xFFDC: ("DNL", "Define number of lines", Skip),
1 memory blocks (64 bytes): JpegImagePlugin.py:292
    0xFFDB: ("DQT", "Define quantization table", DQT),
1 memory blocks (64 bytes): JpegImagePlugin.py:291
    0xFFDA: ("SOS", "Start of scan", Skip),
1 memory blocks (64 bytes): JpegImagePlugin.py:280
    0xFFCF: ("SOF15", "Differential spatial (AC)", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:279
    0xFFCE: ("SOF14", "Differential progressive DCT (AC)", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:278
    0xFFCD: ("SOF13", "Differential sequential DCT (AC)", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:277
    0xFFCC: ("DAC", "Define arithmetic coding conditioning", Skip),
1 memory blocks (64 bytes): JpegImagePlugin.py:276
    0xFFCB: ("SOF11", "Spatial lossless DCT (AC)", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:275
    0xFFCA: ("SOF10", "Progressive DCT (AC)", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:274
    0xFFC9: ("SOF9", "Extended sequential DCT (AC)", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:272
    0xFFC7: ("SOF7", "Differential spatial", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:271
    0xFFC6: ("SOF6", "Differential progressive DCT", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:270
    0xFFC5: ("SOF5", "Differential sequential DCT", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:269
    0xFFC4: ("DHT", "Define Huffman table", Skip),
1 memory blocks (64 bytes): JpegImagePlugin.py:268
    0xFFC3: ("SOF3", "Spatial lossless", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:267
    0xFFC2: ("SOF2", "Progressive DCT", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:266
    0xFFC1: ("SOF1", "Extended Sequential DCT", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:265
    0xFFC0: ("SOF0", "Baseline DCT", SOF),
1 memory blocks (64 bytes): JpegImagePlugin.py:48
    from .JpegPresets import presets
1 memory blocks (64 bytes): Image.py:3127
    ID.append(id)
1 memory blocks (64 bytes): Image.py:2209
    fp = builtins.open(filename, "w+b")
1 memory blocks (64 bytes): Image.py:545
    new.info = self.info.copy()
1 memory blocks (64 bytes): Image.py:500
    self.im = None
1 memory blocks (64 bytes): GifImagePlugin.py:409
    RAWMODE = {"1": "L", "L": "L", "P": "P"}
1 memory blocks (64 bytes): sre_parse.py:78
    self.groupdict = {}
1 memory blocks (64 bytes): queue.py:165
    with self.not_empty:
1 memory blocks (64 bytes): __init__.py:1446
    self._cache = {}
1 memory blocks (64 bytes): FastSlam.py:24
    self.numParticles = numParticles
1 memory blocks (64 bytes): pydevd.py:1691
    program_threads_alive = {}
1 memory blocks (64 bytes): pydevd.py:1634
    with self._lock_running_thread_ids if use_lock else NULL:
2 memory blocks (63 bytes): lines.py:61
    def _scale_dashes(offset, dashes, lw):
2 memory blocks (60 bytes): lines.py:630
    def set_data(self, *args):
2 memory blocks (60 bytes): artist.py:290
    @stale.setter
1 memory blocks (60 bytes): Image.py:426
    encoder = getattr(core, encoder_name + "_encoder")
2 memory blocks (59 bytes): __init__.py:823
    def clean(self):
2 memory blocks (58 bytes): __init__.py:1277
    def is_math_text(s):
1 memory blocks (58 bytes): backend_bases.py:2260
    print_method = getattr(canvas, 'print_%s' % format)
1 memory blocks (56 bytes): transforms.py:2610
    [ 0.0,  0.0,  1.0]],
1 memory blocks (56 bytes): transforms.py:2609
    [ 0.0, outh, outb],
1 memory blocks (56 bytes): transforms.py:1133
    [p[1, 0], p[1, 1]]])
1 memory blocks (56 bytes): text.py:252
    _api.check_in_list(["anchor", "default", None], rotation_mode=m)
1 memory blocks (56 bytes): image.py:1644
    pil_shape = (rgba.shape[1], rgba.shape[0])
1 memory blocks (56 bytes): figure.py:2498
    for name, size in zip(['w_pad', 'h_pad', 'wspace', 'hspace'],
1 memory blocks (56 bytes): colors.py:189
    _colors_full_map.cache[c, alpha] = rgba
1 memory blocks (56 bytes): __init__.py:875
    siblings = self._mapping.get(weakref.ref(a), [weakref.ref(a)])
1 memory blocks (56 bytes): __init__.py:258
    for signal, cid_to_proxy in list(self.callbacks.items()):
1 memory blocks (56 bytes): __init__.py:236
    for signal, proxy_to_cid in list(self._func_cid_map.items()):
1 memory blocks (56 bytes): axis.py:161
    [], [],
1 memory blocks (56 bytes): axis.py:156
    [], [],
1 memory blocks (56 bytes): tracemalloc.py:558
    traces = _get_traces()
1 memory blocks (56 bytes): pathlib.py:57
    parsed = []
1 memory blocks (56 bytes): __init__.py:1444
    self.handlers = []
1 memory blocks (56 bytes): copyreg.py:126
    names = []
1 memory blocks (56 bytes): FastSlam.py:204
    plt.close()
1 memory blocks (56 bytes): FastSlam.py:198
    ogMap = bestParticle.og.occupancyGridVisited / bestParticle.og.occupancyGridTotal
1 memory blocks (56 bytes): FastSlam.py:194
    bestParticle = particle
1 memory blocks (56 bytes): FastSlam.py:193
    maxWeight = particle.weight
1 memory blocks (56 bytes): FastSlam.py:192
    if maxWeight < particle.weight:
1 memory blocks (56 bytes): FastSlam.py:191
    for particle in pf.particles:
1 memory blocks (56 bytes): FastSlam.py:190
    maxWeight = -1
1 memory blocks (56 bytes): FastSlam.py:171
    if count > 35:
1 memory blocks (56 bytes): FastSlam.py:169
    count += 1
1 memory blocks (56 bytes): FastSlam.py:25
    self.particles = []
1 memory blocks (56 bytes): pydevd.py:1749
    cmds_to_add_back = []
1 memory blocks (56 bytes): pydevd_filtering.py:253
    found_in_project = []
1 memory blocks (56 bytes): pydevd_daemon_thread.py:103
    return [t for t in ret if not getattr(t, 'is_pydev_daemon_thread', False)]
1 memory blocks (52 bytes): _tkinter_finder.py:13
    tk_version = str(tkinter.TkVersion)
2 memory blocks (51 bytes): font_manager.py:1248
    def findfont(self, prop, fontext='ttf', directory=None,
2 memory blocks (49 bytes): font_manager.py:887
    def set_file(self, file):
3 memory blocks (48 bytes): colors.py:529
    distance = (xind[1:-1] - x[ind - 1]) / (x[ind] - x[ind - 1])
2 memory blocks (48 bytes): backend_bases.py:997
    def get_hatch_path(self, density=6.0):
2 memory blocks (48 bytes): queue.py:177
    remaining = endtime - time()
1 memory blocks (48 bytes): fromnumeric.py:42
    wrap = obj.__array_wrap__
1 memory blocks (48 bytes): ticker.py:445
    mpl.font_manager.FontProperties(
1 memory blocks (48 bytes): path.py:729
    cls._unit_rectangle = cls([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]],
1 memory blocks (48 bytes): __init__.py:1341
    rv = (self.loggerClass or _loggerClass)(name)
1 memory blocks (48 bytes): FastSlam.py:233
    pf = ParticleFilter(numParticles, ogParameters, smParameters)
1 memory blocks (48 bytes): pydevd.py:1331
    pydev_log.debug_once('File not traced (not in project - force_check_project_scope): %s', original_filename)
1 memory blocks (48 bytes): pydevd.py:1300
    return self._apply_filter_cache[cache_key]
1 memory blocks (48 bytes): pydevd_filtering.py:263
    if root and (absolute_normalized_filename.startswith(root) or root == absolute_normalized_filename_as_dir):
2 memory blocks (47 bytes): multiarray.py:153
    @array_function_from_c_func_and_dispatcher(_multiarray_umath.concatenate)
2 memory blocks (46 bytes): lines.py:713
    def set_transform(self, t):
2 memory blocks (45 bytes): stride_tricks.py:542
    if all(array.shape == shape for array in args):
2 memory blocks (45 bytes): transforms.py:341
    @property
2 memory blocks (45 bytes): transforms.py:336
    @property
2 memory blocks (45 bytes): transforms.py:331
    @property
2 memory blocks (45 bytes): transforms.py:326
    @property
2 memory blocks (45 bytes): text.py:1251
    def set_fontproperties(self, fp):
2 memory blocks (45 bytes): lines.py:1010
    def set_antialiased(self, b):
2 memory blocks (44 bytes): arraysetops.py:125
    def _unpack_tuple(x):
2 memory blocks (44 bytes): transforms.py:813
    @staticmethod
2 memory blocks (44 bytes): font_manager.py:1122
    @staticmethod
2 memory blocks (43 bytes): text.py:1052
    def set_fontsize(self, fontsize):
2 memory blocks (43 bytes): axis.py:316
    def set_label2(self, s):
2 memory blocks (43 bytes): axis.py:303
    def set_label1(self, s):
2 memory blocks (43 bytes): artist.py:1159
    def set(self, **kwargs):
2 memory blocks (43 bytes): __init__.py:1382
    def bind(self, sequence=None, func=None, add=None):
2 memory blocks (42 bytes): _methods.py:47
    def _sum(a, axis=None, dtype=None, out=None, keepdims=False,
2 memory blocks (42 bytes): _methods.py:43
    def _amin(a, axis=None, out=None, keepdims=False,
2 memory blocks (42 bytes): _methods.py:39
    def _amax(a, axis=None, out=None, keepdims=False,
2 memory blocks (41 bytes): transforms.py:1373
    yield IdentityTransform(), self
2 memory blocks (40 bytes): fromnumeric.py:200
    @array_function_dispatch(_reshape_dispatcher)
2 memory blocks (40 bytes): transforms.py:2012
    def rotate_deg(self, degrees):
2 memory blocks (40 bytes): transforms.py:1846
    def frozen(self):
2 memory blocks (40 bytes): axis.py:340
    def _set_artist_props(self, a):
2 memory blocks (40 bytes): artist.py:405
    def pchanged(self):
2 memory blocks (40 bytes): _binary.py:84
    def i32be(c, o=0):
2 memory blocks (40 bytes): PngImagePlugin.py:137
    def _crc32(data, seed=0):
1 memory blocks (40 bytes): TiffImagePlugin.py:417
    __floor__ = _delegate("__floor__")
1 memory blocks (40 bytes): TiffImagePlugin.py:416
    __ceil__ = _delegate("__ceil__")
1 memory blocks (40 bytes): TiffImagePlugin.py:415
    __bool__ = _delegate("__bool__")
1 memory blocks (40 bytes): TiffImagePlugin.py:414
    __ge__ = _delegate("__ge__")
1 memory blocks (40 bytes): TiffImagePlugin.py:413
    __le__ = _delegate("__le__")
1 memory blocks (40 bytes): TiffImagePlugin.py:412
    __gt__ = _delegate("__gt__")
1 memory blocks (40 bytes): TiffImagePlugin.py:411
    __lt__ = _delegate("__lt__")
1 memory blocks (40 bytes): TiffImagePlugin.py:410
    __trunc__ = _delegate("__trunc__")
1 memory blocks (40 bytes): TiffImagePlugin.py:409
    __abs__ = _delegate("__abs__")
1 memory blocks (40 bytes): TiffImagePlugin.py:408
    __neg__ = _delegate("__neg__")
1 memory blocks (40 bytes): TiffImagePlugin.py:407
    __pos__ = _delegate("__pos__")
1 memory blocks (40 bytes): TiffImagePlugin.py:406
    __rpow__ = _delegate("__rpow__")
1 memory blocks (40 bytes): TiffImagePlugin.py:405
    __pow__ = _delegate("__pow__")
1 memory blocks (40 bytes): TiffImagePlugin.py:404
    __rmod__ = _delegate("__rmod__")
1 memory blocks (40 bytes): TiffImagePlugin.py:403
    __mod__ = _delegate("__mod__")
1 memory blocks (40 bytes): TiffImagePlugin.py:402
    __rfloordiv__ = _delegate("__rfloordiv__")
1 memory blocks (40 bytes): TiffImagePlugin.py:401
    __floordiv__ = _delegate("__floordiv__")
1 memory blocks (40 bytes): TiffImagePlugin.py:400
    __rtruediv__ = _delegate("__rtruediv__")
1 memory blocks (40 bytes): TiffImagePlugin.py:399
    __truediv__ = _delegate("__truediv__")
1 memory blocks (40 bytes): TiffImagePlugin.py:398
    __rmul__ = _delegate("__rmul__")
1 memory blocks (40 bytes): TiffImagePlugin.py:397
    __mul__ = _delegate("__mul__")
1 memory blocks (40 bytes): TiffImagePlugin.py:396
    __rsub__ = _delegate("__rsub__")
1 memory blocks (40 bytes): TiffImagePlugin.py:395
    __sub__ = _delegate("__sub__")
1 memory blocks (40 bytes): TiffImagePlugin.py:394
    __radd__ = _delegate("__radd__")
1 memory blocks (40 bytes): TiffImagePlugin.py:393
    __add__ = _delegate("__add__")
2 memory blocks (39 bytes): text.py:1283
    def set_parse_math(self, parse_math):
2 memory blocks (39 bytes): backend_agg.py:312
    def points_to_pixels(self, points):
2 memory blocks (39 bytes): _base.py:779
    @property
2 memory blocks (39 bytes): threading.py:276
    def _acquire_restore(self, x):
2 memory blocks (39 bytes): threading.py:273
    def _release_save(self):
2 memory blocks (38 bytes): fromnumeric.py:588
    @array_function_dispatch(_transpose_dispatcher)
2 memory blocks (38 bytes): transforms.py:1052
    def get_points(self):
2 memory blocks (38 bytes): axis.py:711
    @isDefault_minfmt.setter
2 memory blocks (38 bytes): axis.py:703
    @isDefault_minloc.setter
2 memory blocks (38 bytes): axis.py:695
    @isDefault_majfmt.setter
2 memory blocks (38 bytes): axis.py:687
    @isDefault_majloc.setter
2 memory blocks (38 bytes): contextlib.py:279
    @wraps(func)
2 memory blocks (37 bytes): fromnumeric.py:1881
    @array_function_dispatch(_nonzero_dispatcher)
2 memory blocks (37 bytes): transforms.py:2130
    def transform(self, points):
2 memory blocks (37 bytes): axis.py:752
    def get_transform(self):
2 memory blocks (37 bytes): threading.py:264
    def __enter__(self):
2 memory blocks (37 bytes): abc.py:121
    def __subclasscheck__(cls, subclass):
2 memory blocks (37 bytes): abc.py:117
    def __instancecheck__(cls, instance):
2 memory blocks (36 bytes): shape_base.py:608
    def _column_stack_dispatcher(tup):
2 memory blocks (36 bytes): font_manager.py:1109
    @staticmethod
2 memory blocks (36 bytes): __init__.py:1184
    def is_interactive():
2 memory blocks (35 bytes): text.py:1295
    def get_parse_math(self):
2 memory blocks (35 bytes): text.py:1279
    def get_usetex(self):
2 memory blocks (35 bytes): text.py:861
    def get_text(self):
2 memory blocks (35 bytes): text.py:235
    def get_transform_rotates_text(self):
2 memory blocks (35 bytes): scale.py:116
    def get_transform(self):
2 memory blocks (35 bytes): path.py:245
    @property
2 memory blocks (35 bytes): path.py:233
    @property
2 memory blocks (35 bytes): path.py:214
    @property
2 memory blocks (35 bytes): path.py:200
    @property
2 memory blocks (35 bytes): markers.py:259
    def get_fillstyle(self):
2 memory blocks (35 bytes): font_manager.py:907
    def get_math_fontfamily(self):
2 memory blocks (35 bytes): font_manager.py:778
    def get_file(self):
2 memory blocks (35 bytes): font_manager.py:775
    def get_size_in_points(self):
2 memory blocks (35 bytes): font_manager.py:769
    def get_size(self):
2 memory blocks (35 bytes): font_manager.py:761
    def get_stretch(self):
2 memory blocks (35 bytes): font_manager.py:752
    def get_weight(self):
2 memory blocks (35 bytes): font_manager.py:746
    def get_variant(self):
2 memory blocks (35 bytes): font_manager.py:739
    def get_style(self):
2 memory blocks (35 bytes): font_manager.py:727
    def get_family(self):
2 memory blocks (35 bytes): figure.py:2385
    def _get_dpi(self):
2 memory blocks (35 bytes): backend_bases.py:1016
    def get_sketch_params(self):
2 memory blocks (35 bytes): backend_bases.py:1012
    def get_hatch_linewidth(self):
2 memory blocks (35 bytes): backend_bases.py:1004
    def get_hatch_color(self):
2 memory blocks (35 bytes): backend_bases.py:993
    def get_hatch(self):
2 memory blocks (35 bytes): backend_bases.py:858
    def get_snap(self):
2 memory blocks (35 bytes): backend_bases.py:818
    def get_dashes(self):
2 memory blocks (35 bytes): backend_bases.py:658
    def new_gc(self):
2 memory blocks (35 bytes): axis.py:558
    @property
2 memory blocks (35 bytes): axis.py:287
    def get_loc(self):
2 memory blocks (35 bytes): artist.py:1111
    @property
2 memory blocks (35 bytes): artist.py:921
    def get_agg_filter(self):
2 memory blocks (35 bytes): artist.py:896
    def get_rasterized(self):
2 memory blocks (35 bytes): artist.py:828
    def get_visible(self):
2 memory blocks (35 bytes): artist.py:716
    def get_path_effects(self):
2 memory blocks (35 bytes): artist.py:604
    def get_gid(self):
2 memory blocks (35 bytes): artist.py:266
    @property
2 memory blocks (35 bytes): Image.py:529
    @property
2 memory blocks (32 bytes): colors.py:530
    lut = np.concatenate([
1 memory blocks (32 bytes): font_manager.py:1426
    thread_id=threading.get_ident())
1 memory blocks (32 bytes): colors.py:504
    adata = np.array(data)
1 memory blocks (32 bytes): OccupancyGrid.py:40
    yGrid[:, numHalfElem + 1: 2 * numHalfElem + 1] / xGrid[:, numHalfElem + 1: 2 * numHalfElem + 1]))
1 memory blocks (28 bytes): _ufunc_config.py:122
    maskvalue = ((_errdict[divide] << SHIFT_DIVIDEBYZERO) +
1 memory blocks (28 bytes): __init__.py:4029
    Image._last_id += 1
1 memory blocks (24 bytes): transforms.py:2005
    b = math.sin(theta)
1 memory blocks (24 bytes): transforms.py:2004
    a = math.cos(theta)
1 memory blocks (24 bytes): ticker.py:2071
    raw_step = (_vmax - _vmin) / nbins
1 memory blocks (24 bytes): ticker.py:2070
    _vmax = vmax - offset
1 memory blocks (24 bytes): ticker.py:2069
    _vmin = vmin - offset
1 memory blocks (24 bytes): text.py:408
    offsety = ymin + height - baseline / 2.0
1 memory blocks (24 bytes): text.py:372
    corners_horiz = np.array(
1 memory blocks (24 bytes): text.py:354
    ymin = ys[-1] - descent  # baseline of last line minus its descent
